[
  {
    "Name": "TestPKIsHandleRangeScan",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select b from t where a > 1",
        "Plan": [
          "Projection_8 3333.33 root  test.t.b",
          "└─BlockReader_9 3333.33 root  data:BlockRangeScan_10",
          "  └─BlockRangeScan_10 3333.33 INTERLOCK[einsteindb] block:t range:(1,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4",
          "6"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select b from t where a > 1 and a < 3",
        "Plan": [
          "Projection_8 2.00 root  test.t.b",
          "└─BlockReader_9 2.00 root  data:BlockRangeScan_10",
          "  └─BlockRangeScan_10 2.00 INTERLOCK[einsteindb] block:t range:(1,3), keep order:false, stats:pseudo"
        ],
        "Result": null
      },
      {
        "ALLEGROALLEGROSQL": "select b from t where a > 1 and b < 6",
        "Plan": [
          "Projection_9 2666.67 root  test.t.b",
          "└─BlockReader_10 2666.67 root  data:Selection_11",
          "  └─Selection_11 2666.67 INTERLOCK[einsteindb]  lt(test.t.b, 6)",
          "    └─BlockRangeScan_12 3333.33 INTERLOCK[einsteindb] block:t range:(1,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where a * 3 + 1 > 9 and a < 5",
        "Plan": [
          "BlockReader_9 4.00 root  data:Selection_10",
          "└─Selection_10 4.00 INTERLOCK[einsteindb]  gt(plus(mul(test.t.a, 3), 1), 9)",
          "  └─BlockRangeScan_11 5.00 INTERLOCK[einsteindb] block:t range:[-inf,5), keep order:false, stats:pseudo"
        ],
        "Result": [
          "3"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a from t group by a having sum(b) > 4",
        "Plan": [
          "Projection_13 8000.00 root  test.t.a",
          "└─BlockReader_14 8000.00 root  data:Selection_15",
          "  └─Selection_15 8000.00 INTERLOCK[einsteindb]  gt(cast(test.t.b), 4)",
          "    └─BlockFullScan_16 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "5"
        ]
      }
    ]
  },
  {
    "Name": "TestSort",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select a from t order by a",
        "Plan": [
          "BlockReader_7 10000.00 root  data:BlockFullScan_8",
          "└─BlockFullScan_8 10000.00 INTERLOCK[einsteindb] block:t keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "2",
          "3",
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select b from t order by b",
        "Plan": [
          "Sort_11 10000.00 root  test.t.b",
          "└─BlockReader_9 10000.00 root  data:BlockFullScan_10",
          "  └─BlockFullScan_10 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "11",
          "22",
          "33",
          "44"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select b from t order by a+b",
        "Plan": [
          "Projection_7 10000.00 root  test.t.b",
          "└─Projection_12 10000.00 root  test.t.b, test.t.a",
          "  └─Sort_8 10000.00 root  DeferredCauset#4",
          "    └─Projection_13 10000.00 root  test.t.b, test.t.a, plus(test.t.a, test.t.b)->DeferredCauset#4",
          "      └─Projection_9 10000.00 root  test.t.b, test.t.a",
          "        └─BlockReader_10 10000.00 root  data:BlockFullScan_11",
          "          └─BlockFullScan_11 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "11",
          "22",
          "33",
          "44"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select b from t order by b, a+b, a",
        "Plan": [
          "Projection_7 10000.00 root  test.t.b",
          "└─Projection_12 10000.00 root  test.t.b, test.t.a",
          "  └─Sort_8 10000.00 root  test.t.b, DeferredCauset#4, test.t.a",
          "    └─Projection_13 10000.00 root  test.t.b, test.t.a, plus(test.t.a, test.t.b)->DeferredCauset#4",
          "      └─Projection_9 10000.00 root  test.t.b, test.t.a",
          "        └─BlockReader_10 10000.00 root  data:BlockFullScan_11",
          "          └─BlockFullScan_11 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "11",
          "22",
          "33",
          "44"
        ]
      }
    ]
  },
  {
    "Name": "TestAggregation",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select sum(a) from t",
        "Plan": [
          "HashAgg_14 1.00 root  funcs:sum(DeferredCauset#4)->DeferredCauset#3",
          "└─BlockReader_15 1.00 root  data:HashAgg_16",
          "  └─HashAgg_16 1.00 INTERLOCK[einsteindb]  funcs:sum(test.t.a)->DeferredCauset#4",
          "    └─BlockFullScan_13 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "10"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select max(a), min(b) from t",
        "Plan": [
          "HashAgg_11 1.00 root  funcs:max(DeferredCauset#5)->DeferredCauset#3, funcs:min(DeferredCauset#6)->DeferredCauset#4",
          "└─BlockReader_12 1.00 root  data:HashAgg_13",
          "  └─HashAgg_13 1.00 INTERLOCK[einsteindb]  funcs:max(test.t.a)->DeferredCauset#5, funcs:min(test.t.b)->DeferredCauset#6",
          "    └─BlockFullScan_10 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "4 11"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select b, avg(a) from t group by b order by b",
        "Plan": [
          "Projection_12 8000.00 root  test.t.b, DeferredCauset#3",
          "└─Sort_21 8000.00 root  test.t.b",
          "  └─HashAgg_18 8000.00 root  group by:test.t.b, funcs:avg(DeferredCauset#4, DeferredCauset#5)->DeferredCauset#3, funcs:firstrow(test.t.b)->test.t.b",
          "    └─BlockReader_19 8000.00 root  data:HashAgg_20",
          "      └─HashAgg_20 8000.00 INTERLOCK[einsteindb]  group by:test.t.b, funcs:count(test.t.a)->DeferredCauset#4, funcs:sum(test.t.a)->DeferredCauset#5",
          "        └─BlockFullScan_17 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "11 1.0000",
          "22 2.0000",
          "33 3.0000",
          "44 4.0000"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select b, sum(a) from t group by b order by b",
        "Plan": [
          "Projection_12 8000.00 root  test.t.b, DeferredCauset#3",
          "└─Sort_21 8000.00 root  test.t.b",
          "  └─HashAgg_18 8000.00 root  group by:test.t.b, funcs:sum(DeferredCauset#4)->DeferredCauset#3, funcs:firstrow(test.t.b)->test.t.b",
          "    └─BlockReader_19 8000.00 root  data:HashAgg_20",
          "      └─HashAgg_20 8000.00 INTERLOCK[einsteindb]  group by:test.t.b, funcs:sum(test.t.a)->DeferredCauset#4",
          "        └─BlockFullScan_17 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "11 1",
          "22 2",
          "33 3",
          "44 4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select b, avg(a) from t group by b having sum(a) > 1 order by b",
        "Plan": [
          "Projection_14 6400.00 root  test.t.b, DeferredCauset#3",
          "└─Projection_16 6400.00 root  test.t.b, DeferredCauset#3, DeferredCauset#4",
          "  └─Sort_29 6400.00 root  test.t.b",
          "    └─Selection_28 6400.00 root  gt(DeferredCauset#4, 1)",
          "      └─HashAgg_19 8000.00 root  group by:test.t.b, funcs:avg(DeferredCauset#11)->DeferredCauset#3, funcs:sum(DeferredCauset#12)->DeferredCauset#4, funcs:firstrow(test.t.b)->test.t.b",
          "        └─Projection_20 10000.00 root  cast(test.t.a, decimal(65,4) BINARY)->DeferredCauset#11, cast(test.t.a, decimal(65,0) BINARY)->DeferredCauset#12, test.t.b, test.t.b",
          "          └─BlockReader_21 10000.00 root  data:BlockFullScan_22",
          "            └─BlockFullScan_22 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "22 2.0000",
          "33 3.0000",
          "44 4.0000"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select max(a+b) from t",
        "Plan": [
          "HashAgg_68 1.00 root  funcs:max(DeferredCauset#4)->DeferredCauset#3",
          "└─BlockReader_69 1.00 root  data:HashAgg_70",
          "  └─HashAgg_70 1.00 INTERLOCK[einsteindb]  funcs:max(plus(test.t.a, test.t.b))->DeferredCauset#4",
          "    └─BlockFullScan_41 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "48"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select sum(a) from t group by a, a+b order by a",
        "Plan": [
          "Projection_10 10000.00 root  DeferredCauset#3",
          "└─Projection_12 10000.00 root  cast(test.t.a, decimal(65,0) BINARY)->DeferredCauset#3, test.t.a",
          "  └─BlockReader_13 10000.00 root  data:BlockFullScan_14",
          "    └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "2",
          "3",
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select b, sum(a) from t group by b having b > 1 order by b",
        "Plan": [
          "Projection_16 6400.00 root  test.t.b, DeferredCauset#3",
          "└─Sort_26 6400.00 root  test.t.b",
          "  └─HashAgg_23 6400.00 root  group by:test.t.b, funcs:sum(DeferredCauset#4)->DeferredCauset#3, funcs:firstrow(test.t.b)->test.t.b",
          "    └─BlockReader_24 6400.00 root  data:HashAgg_25",
          "      └─HashAgg_25 6400.00 INTERLOCK[einsteindb]  group by:test.t.b, funcs:sum(test.t.a)->DeferredCauset#4",
          "        └─Selection_21 8000.00 INTERLOCK[einsteindb]  gt(test.t.b, 1)",
          "          └─BlockFullScan_22 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "11 1",
          "22 2",
          "33 3",
          "44 4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select c, sum(a) from (select a+b as c, a from t) t1 group by c having c > 1 order by c",
        "Plan": [
          "Projection_23 6400.00 root  DeferredCauset#3, DeferredCauset#4",
          "└─Sort_35 6400.00 root  DeferredCauset#3",
          "  └─HashAgg_32 6400.00 root  group by:DeferredCauset#7, funcs:sum(DeferredCauset#8)->DeferredCauset#4, funcs:firstrow(DeferredCauset#7)->DeferredCauset#3",
          "    └─BlockReader_33 6400.00 root  data:HashAgg_34",
          "      └─HashAgg_34 6400.00 INTERLOCK[einsteindb]  group by:plus(test.t.a, test.t.b), funcs:sum(test.t.a)->DeferredCauset#8",
          "        └─Selection_28 8000.00 INTERLOCK[einsteindb]  gt(plus(test.t.a, test.t.b), 1)",
          "          └─BlockFullScan_29 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "12 1",
          "24 2",
          "36 3",
          "48 4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select max(a.a) from t a left join t b on a.a = b.a",
        "Plan": [
          "HashAgg_33 1.00 root  funcs:max(test.t.a)->DeferredCauset#5",
          "└─Limit_35 1.00 root  offset:0, count:1",
          "  └─BlockReader_40 1.00 root  data:Limit_41",
          "    └─Limit_41 1.00 INTERLOCK[einsteindb]  offset:0, count:1",
          "      └─BlockFullScan_39 1.00 INTERLOCK[einsteindb] block:a keep order:true, desc, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select avg(a.b) from t a left join t b on a.a = b.a",
        "Plan": [
          "HashAgg_16 1.00 root  funcs:avg(DeferredCauset#6, DeferredCauset#7)->DeferredCauset#5",
          "└─BlockReader_17 1.00 root  data:HashAgg_18",
          "  └─HashAgg_18 1.00 INTERLOCK[einsteindb]  funcs:count(test.t.b)->DeferredCauset#6, funcs:sum(test.t.b)->DeferredCauset#7",
          "    └─BlockFullScan_15 10000.00 INTERLOCK[einsteindb] block:a keep order:false, stats:pseudo"
        ],
        "Result": [
          "27.5000"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select t1.a, max(t1.b) from t as t1 left join (select * from t) as t2 on t1.a = t2.a and t1.b = 3 group by t1.a order by a",
        "Plan": [
          "Projection_14 10000.00 root  test.t.a, cast(test.t.b, int(11))->DeferredCauset#5",
          "└─BlockReader_15 10000.00 root  data:BlockFullScan_16",
          "  └─BlockFullScan_16 10000.00 INTERLOCK[einsteindb] block:t1 keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select t1.a, sum(distinct t1.b) from t as t1 left join (select * from t) as t2 on t1.b = t2.b group by t1.a order by a",
        "Plan": [
          "Projection_13 10000.00 root  test.t.a, cast(test.t.b, decimal(65,0) BINARY)->DeferredCauset#5",
          "└─BlockReader_14 10000.00 root  data:BlockFullScan_15",
          "  └─BlockFullScan_15 10000.00 INTERLOCK[einsteindb] block:t1 keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select t2.a, max(t2.b) from t as t1 right join (select * from t) as t2 on t1.a = t2.a group by t2.a order by a",
        "Plan": [
          "Projection_14 10000.00 root  test.t.a, cast(test.t.b, int(11))->DeferredCauset#5",
          "└─BlockReader_15 10000.00 root  data:BlockFullScan_16",
          "  └─BlockFullScan_16 10000.00 INTERLOCK[einsteindb] block:t keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select t3.a, max(t3.b) from (select t1.a, t1.b from t as t1 left join t as t2 on t1.b = t2.b) t3 group by t3.a order by a",
        "Plan": [
          "Projection_13 10000.00 root  test.t.a, cast(test.t.b, int(11))->DeferredCauset#5",
          "└─BlockReader_14 10000.00 root  data:BlockFullScan_15",
          "  └─BlockFullScan_15 10000.00 INTERLOCK[einsteindb] block:t1 keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select max(a) from t",
        "Plan": [
          "HashAgg_21 1.00 root  funcs:max(test.t.a)->DeferredCauset#3",
          "└─Limit_23 1.00 root  offset:0, count:1",
          "  └─BlockReader_28 1.00 root  data:Limit_29",
          "    └─Limit_29 1.00 INTERLOCK[einsteindb]  offset:0, count:1",
          "      └─BlockFullScan_27 1.00 INTERLOCK[einsteindb] block:t keep order:true, desc, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select sum(case when a > 0 and a <= 1000 then b else 0 end) from t",
        "Plan": [
          "HashAgg_18 1.00 root  funcs:sum(DeferredCauset#4)->DeferredCauset#3",
          "└─BlockReader_19 1.00 root  data:HashAgg_20",
          "  └─HashAgg_20 1.00 INTERLOCK[einsteindb]  funcs:sum(test.t.b)->DeferredCauset#4",
          "    └─BlockRangeScan_17 250.00 INTERLOCK[einsteindb] block:t range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "110"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select sum(case when a > 0 then (case when a <= 1000 then b end) else 0 end) from t",
        "Plan": [
          "HashAgg_21 1.00 root  funcs:sum(DeferredCauset#4)->DeferredCauset#3",
          "└─BlockReader_22 1.00 root  data:HashAgg_23",
          "  └─HashAgg_23 1.00 INTERLOCK[einsteindb]  funcs:sum(test.t.b)->DeferredCauset#4",
          "    └─BlockRangeScan_20 250.00 INTERLOCK[einsteindb] block:t range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "110"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select sum(case when a <= 0 or a > 1000 then 0.0 else b end) from t",
        "Plan": [
          "HashAgg_18 1.00 root  funcs:sum(DeferredCauset#4)->DeferredCauset#3",
          "└─BlockReader_19 1.00 root  data:HashAgg_20",
          "  └─HashAgg_20 1.00 INTERLOCK[einsteindb]  funcs:sum(cast(test.t.b))->DeferredCauset#4",
          "    └─BlockRangeScan_17 250.00 INTERLOCK[einsteindb] block:t range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "110.0"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select count(case when a > 0 and a <= 1000 then b end) from t",
        "Plan": [
          "HashAgg_15 1.00 root  funcs:count(DeferredCauset#4)->DeferredCauset#3",
          "└─BlockReader_16 1.00 root  data:HashAgg_17",
          "  └─HashAgg_17 1.00 INTERLOCK[einsteindb]  funcs:count(test.t.b)->DeferredCauset#4",
          "    └─BlockRangeScan_14 250.00 INTERLOCK[einsteindb] block:t range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select count(case when a <= 0 or a > 1000 then null else b end) from t",
        "Plan": [
          "HashAgg_15 1.00 root  funcs:count(DeferredCauset#4)->DeferredCauset#3",
          "└─BlockReader_16 1.00 root  data:HashAgg_17",
          "  └─HashAgg_17 1.00 INTERLOCK[einsteindb]  funcs:count(test.t.b)->DeferredCauset#4",
          "    └─BlockRangeScan_14 250.00 INTERLOCK[einsteindb] block:t range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select count(distinct case when a > 0 and a <= 1000 then b end) from t",
        "Plan": [
          "HashAgg_10 1.00 root  funcs:count(distinct test.t.b)->DeferredCauset#3",
          "└─BlockReader_11 250.00 root  data:BlockRangeScan_12",
          "  └─BlockRangeScan_12 250.00 INTERLOCK[einsteindb] block:t range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select approx_count_distinct(case when a > 0 and a <= 1000 then b end) from t",
        "Plan": [
          "HashAgg_10 1.00 root  funcs:approx_count_distinct(test.t.b)->DeferredCauset#3",
          "└─BlockReader_11 250.00 root  data:BlockRangeScan_12",
          "  └─BlockRangeScan_12 250.00 INTERLOCK[einsteindb] block:t range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select count(b), sum(b), avg(b), b, max(b), min(b), bit_and(b), bit_or(b), bit_xor(b) from t group by a having sum(b) >= 0 and count(b) >= 0 order by b",
        "Plan": [
          "Projection_13 8000.00 root  DeferredCauset#3, DeferredCauset#4, DeferredCauset#5, test.t.b, DeferredCauset#6, DeferredCauset#7, DeferredCauset#8, DeferredCauset#9, DeferredCauset#10",
          "└─Projection_15 8000.00 root  if(isnull(test.t.b), 0, 1)->DeferredCauset#3, cast(test.t.b, decimal(65,0) BINARY)->DeferredCauset#4, cast(test.t.b, decimal(65,4) BINARY)->DeferredCauset#5, test.t.b, cast(test.t.b, int(11))->DeferredCauset#6, cast(test.t.b, int(11))->DeferredCauset#7, ifnull(cast(test.t.b, bigint(21) UNSIGNED BINARY), 18446744073709551615)->DeferredCauset#8, ifnull(cast(test.t.b, bigint(21) UNSIGNED BINARY), 0)->DeferredCauset#9, ifnull(cast(test.t.b, bigint(21) UNSIGNED BINARY), 0)->DeferredCauset#10, cast(test.t.b, decimal(65,0) BINARY)->DeferredCauset#4, if(isnull(test.t.b), 0, 1)->DeferredCauset#3",
          "  └─Sort_22 8000.00 root  test.t.b",
          "    └─BlockReader_19 8000.00 root  data:Selection_20",
          "      └─Selection_20 8000.00 INTERLOCK[einsteindb]  ge(cast(test.t.b), 0), ge(if(isnull(test.t.b), 0, 1), 0)",
          "        └─BlockFullScan_21 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 11 11.0000 11 11 11 11 11 11",
          "1 22 22.0000 22 22 22 22 22 22",
          "1 33 33.0000 33 33 33 33 33 33",
          "1 44 44.0000 44 44 44 44 44 44"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select group_concat(a, b), min(b), avg(a / b), a from t group by (a+b), a order by a",
        "Plan": [
          "Sort_15 8000.00 root  test.t.a",
          "└─HashAgg_11 8000.00 root  group by:DeferredCauset#9, test.t.a, funcs:group_concat(DeferredCauset#6, DeferredCauset#7 separator \",\")->DeferredCauset#3, funcs:min(test.t.b)->DeferredCauset#4, funcs:avg(DeferredCauset#8)->DeferredCauset#5, funcs:firstrow(test.t.a)->test.t.a",
          "  └─Projection_12 10000.00 root  cast(test.t.a, var_string(20))->DeferredCauset#6, cast(test.t.b, var_string(20))->DeferredCauset#7, test.t.b, div(cast(test.t.a, decimal(20,0) BINARY), cast(test.t.b, decimal(20,0) BINARY))->DeferredCauset#8, test.t.a, plus(test.t.a, test.t.b)->DeferredCauset#9, test.t.a",
          "    └─BlockReader_13 10000.00 root  data:BlockFullScan_14",
          "      └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "111 11 0.09090909 1",
          "222 22 0.09090909 2",
          "333 33 0.09090909 3",
          "444 44 0.09090909 4"
        ]
      }
    ]
  },
  {
    "Name": "TestPushdownDistinctEnable",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ avg(distinct a) from t;",
        "Plan": [
          "HashAgg_16 1.00 root  funcs:avg(distinct DeferredCauset#7)->DeferredCauset#5",
          "└─Projection_17 8000.00 root  cast(test.t.a, decimal(65,4) BINARY)->DeferredCauset#7",
          "  └─BlockReader_18 8000.00 root  data:HashAgg_19",
          "    └─HashAgg_19 8000.00 INTERLOCK[einsteindb]  group by:test.t.a, ",
          "      └─BlockFullScan_15 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.5000"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ a, count(distinct a) from t;",
        "Plan": [
          "Projection_8 1.00 root  test.t.a, DeferredCauset#5",
          "└─HashAgg_12 1.00 root  funcs:count(distinct test.t.a)->DeferredCauset#5, funcs:firstrow(DeferredCauset#6)->test.t.a",
          "  └─BlockReader_13 8000.00 root  data:HashAgg_14",
          "    └─HashAgg_14 8000.00 INTERLOCK[einsteindb]  group by:test.t.a, funcs:firstrow(test.t.a)->DeferredCauset#6",
          "      └─BlockFullScan_11 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;",
        "Plan": [
          "Projection_10 8000.00 root  DeferredCauset#5, test.t.c, DeferredCauset#5, DeferredCauset#6, DeferredCauset#7, DeferredCauset#8, DeferredCauset#9",
          "└─HashAgg_15 8000.00 root  group by:test.t.c, funcs:avg(DeferredCauset#10, DeferredCauset#11)->DeferredCauset#5, funcs:count(distinct test.t.a, test.t.b)->DeferredCauset#6, funcs:count(distinct test.t.a)->DeferredCauset#7, funcs:count(distinct test.t.c)->DeferredCauset#8, funcs:sum(DeferredCauset#12)->DeferredCauset#9, funcs:firstrow(test.t.c)->test.t.c",
          "  └─BlockReader_16 8000.00 root  data:HashAgg_17",
          "    └─HashAgg_17 8000.00 INTERLOCK[einsteindb]  group by:test.t.a, test.t.b, test.t.c, funcs:count(test.t.b)->DeferredCauset#10, funcs:sum(test.t.b)->DeferredCauset#11, funcs:sum(test.t.b)->DeferredCauset#12",
          "      └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.0000 1 1.0000 1 1 1 1",
          "1.3333 3 1.3333 3 2 1 4",
          "2.0000 <nil> 2.0000 1 1 0 2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG() */ count(distinct c) from t group by c;",
        "Plan": [
          "HashAgg_17 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_18 8000.00 root  index:HashAgg_19",
          "  └─HashAgg_19 8000.00 INTERLOCK[einsteindb]  group by:test.t.c, ",
          "    └─IndexFullScan_16 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG() */ count(distinct c) from t;",
        "Plan": [
          "HashAgg_17 1.00 root  funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_18 8000.00 root  index:HashAgg_19",
          "  └─HashAgg_19 8000.00 INTERLOCK[einsteindb]  group by:test.t.c, ",
          "    └─IndexFullScan_16 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ count(distinct c) from t;",
        "Plan": [
          "HashAgg_17 1.00 root  funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_18 8000.00 root  index:HashAgg_19",
          "  └─HashAgg_19 8000.00 INTERLOCK[einsteindb]  group by:test.t.c, ",
          "    └─IndexFullScan_16 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select count(distinct c) from t group by c;",
        "Plan": [
          "HashAgg_17 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_18 8000.00 root  index:HashAgg_19",
          "  └─HashAgg_19 8000.00 INTERLOCK[einsteindb]  group by:test.t.c, ",
          "    └─IndexFullScan_16 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select count(distinct c) from t;",
        "Plan": [
          "HashAgg_17 1.00 root  funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_18 8000.00 root  index:HashAgg_19",
          "  └─HashAgg_19 8000.00 INTERLOCK[einsteindb]  group by:test.t.c, ",
          "    └─IndexFullScan_16 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      }
    ]
  },
  {
    "Name": "TestPushdownDistinctDisable",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ avg(distinct a) from t;",
        "Plan": [
          "HashAgg_8 1.00 root  funcs:avg(distinct DeferredCauset#6)->DeferredCauset#5",
          "└─Projection_9 10000.00 root  cast(test.t.a, decimal(65,4) BINARY)->DeferredCauset#6",
          "  └─BlockReader_10 10000.00 root  data:BlockFullScan_11",
          "    └─BlockFullScan_11 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.5000"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ a, count(distinct a) from t;",
        "Plan": [
          "Projection_6 1.00 root  test.t.a, DeferredCauset#5",
          "└─HashAgg_7 1.00 root  funcs:count(distinct test.t.a)->DeferredCauset#5, funcs:firstrow(test.t.a)->test.t.a",
          "  └─BlockReader_8 10000.00 root  data:BlockFullScan_9",
          "    └─BlockFullScan_9 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;",
        "Plan": [
          "Projection_8 8000.00 root  DeferredCauset#5, test.t.c, DeferredCauset#5, DeferredCauset#6, DeferredCauset#7, DeferredCauset#8, DeferredCauset#9",
          "└─HashAgg_9 8000.00 root  group by:test.t.c, funcs:avg(DeferredCauset#10)->DeferredCauset#5, funcs:count(distinct test.t.a, test.t.b)->DeferredCauset#6, funcs:count(distinct test.t.a)->DeferredCauset#7, funcs:count(distinct test.t.c)->DeferredCauset#8, funcs:sum(DeferredCauset#11)->DeferredCauset#9, funcs:firstrow(test.t.c)->test.t.c",
          "  └─Projection_10 10000.00 root  cast(test.t.b, decimal(65,4) BINARY)->DeferredCauset#10, test.t.a, test.t.b, test.t.a, test.t.c, cast(test.t.b, decimal(65,0) BINARY)->DeferredCauset#11, test.t.c, test.t.c",
          "    └─BlockReader_11 10000.00 root  data:BlockFullScan_12",
          "      └─BlockFullScan_12 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.0000 1 1.0000 1 1 1 1",
          "1.3333 3 1.3333 3 2 1 4",
          "2.0000 <nil> 2.0000 1 1 0 2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG(), AGG_TO_INTERLOCK() */ count(distinct c) from t group by c;",
        "Plan": [
          "HashAgg_8 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_11 10000.00 root  index:IndexFullScan_12",
          "  └─IndexFullScan_12 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG(), AGG_TO_INTERLOCK() */ count(distinct c) from t;",
        "Plan": [
          "HashAgg_8 1.00 root  funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_11 10000.00 root  index:IndexFullScan_12",
          "  └─IndexFullScan_12 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ count(distinct c) from t;",
        "Plan": [
          "HashAgg_8 1.00 root  funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_11 10000.00 root  index:IndexFullScan_12",
          "  └─IndexFullScan_12 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ AGG_TO_INTERLOCK() */ count(distinct c) from t group by c;",
        "Plan": [
          "HashAgg_8 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_11 10000.00 root  index:IndexFullScan_12",
          "  └─IndexFullScan_12 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      }
    ]
  },
  {
    "Name": "TestSimplePlans",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select a from t limit 2",
        "Plan": [
          "Limit_7 2.00 root  offset:0, count:2",
          "└─BlockReader_8 2.00 root  data:Limit_9",
          "  └─Limit_9 2.00 INTERLOCK[einsteindb]  offset:0, count:2",
          "    └─BlockFullScan_10 2.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1",
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a from t limit 1 offset 2",
        "Plan": [
          "Limit_7 1.00 root  offset:2, count:1",
          "└─BlockReader_8 3.00 root  data:Limit_9",
          "  └─Limit_9 3.00 INTERLOCK[einsteindb]  offset:0, count:3",
          "    └─BlockFullScan_10 3.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "3"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select b from t order by b limit 3",
        "Plan": [
          "TopN_9 3.00 root  test.t.b, offset:0, count:3",
          "└─BlockReader_11 3.00 root  data:TopN_12",
          "  └─TopN_12 3.00 INTERLOCK[einsteindb]  test.t.b, offset:0, count:3",
          "    └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "11",
          "22",
          "33"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a from t order by a limit 1 offset 2",
        "Plan": [
          "Limit_10 1.00 root  offset:2, count:1",
          "└─BlockReader_16 3.00 root  data:Limit_17",
          "  └─Limit_17 3.00 INTERLOCK[einsteindb]  offset:0, count:3",
          "    └─BlockFullScan_15 3.00 INTERLOCK[einsteindb] block:t keep order:true, stats:pseudo"
        ],
        "Result": [
          "3"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select * from ((select a as aa from t t1) union all (select b as aa from t t2)) as t3 order by aa",
        "Plan": [
          "Sort_23 20000.00 root  DeferredCauset#5",
          "└─Union_16 20000.00 root  ",
          "  ├─Projection_17 10000.00 root  test.t.a",
          "  │ └─BlockReader_18 10000.00 root  data:BlockFullScan_19",
          "  │   └─BlockFullScan_19 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "  └─Projection_20 10000.00 root  test.t.b",
          "    └─BlockReader_21 10000.00 root  data:BlockFullScan_22",
          "      └─BlockFullScan_22 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo"
        ],
        "Result": [
          "1",
          "2",
          "3",
          "4",
          "11",
          "22",
          "33",
          "44"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a, b, lag(a,1) over (order by b) from t order by b",
        "Plan": [
          "Window_10 10000.00 root  lag(test.t.a, 1)->DeferredCauset#4 over(order by test.t.b)",
          "└─Sort_15 10000.00 root  test.t.b",
          "  └─BlockReader_13 10000.00 root  data:BlockFullScan_14",
          "    └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 11 <nil>",
          "2 22 1",
          "3 33 2",
          "4 44 3"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select * from (select a+1 as c, a+b as d from t) as t1 order by c+d limit 10",
        "Plan": [
          "Projection_22 10.00 root  plus(test.t.a, 1)->DeferredCauset#3, plus(test.t.a, test.t.b)->DeferredCauset#4",
          "└─TopN_23 10.00 root  DeferredCauset#5, offset:0, count:10",
          "  └─Projection_25 10.00 root  test.t.a, test.t.b, plus(plus(test.t.a, 1), plus(test.t.a, test.t.b))->DeferredCauset#5",
          "    └─BlockReader_26 10.00 root  data:TopN_27",
          "      └─TopN_27 10.00 INTERLOCK[einsteindb]  plus(plus(test.t.a, 1), plus(test.t.a, test.t.b)), offset:0, count:10",
          "        └─BlockFullScan_28 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "2 12",
          "3 24",
          "4 36",
          "5 48"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select t1.a, t1.b from t as t1 left join t as t2 on t1.a = t2.a and t1.b = 3 order by a",
        "Plan": [
          "BlockReader_24 12500.00 root  data:BlockFullScan_25",
          "└─BlockFullScan_25 10000.00 INTERLOCK[einsteindb] block:t1 keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      }
    ]
  },
  {
    "Name": "TestIndexScan",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select b from t",
        "Plan": [
          "IndexReader_13 10000.00 root  index:IndexFullScan_14",
          "└─IndexFullScan_14 10000.00 INTERLOCK[einsteindb] block:t, index:idx_b(b) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2",
          "5",
          "8"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a from t order by b",
        "Plan": [
          "Projection_11 10000.00 root  test.t.a",
          "└─IndexReader_15 10000.00 root  index:IndexFullScan_16",
          "  └─IndexFullScan_16 10000.00 INTERLOCK[einsteindb] block:t, index:idx_b(b) keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "4",
          "7"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select c from t",
        "Plan": [
          "IndexReader_9 10000.00 root  index:IndexFullScan_10",
          "└─IndexFullScan_10 10000.00 INTERLOCK[einsteindb] block:t, index:idx_c_b(c, b) keep order:false, stats:pseudo"
        ],
        "Result": [
          "3",
          "6",
          "9"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a from t order by c",
        "Plan": [
          "Projection_9 10000.00 root  test.t.a",
          "└─IndexReader_12 10000.00 root  index:IndexFullScan_13",
          "  └─IndexFullScan_13 10000.00 INTERLOCK[einsteindb] block:t, index:idx_c_b(c, b) keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "4",
          "7"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a, b from t where b > 5 order by b",
        "Plan": [
          "IndexReader_18 8000.00 root  index:IndexRangeScan_19",
          "└─IndexRangeScan_19 3333.33 INTERLOCK[einsteindb] block:t, index:idx_b(b) range:(5,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "7 8"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a, b, c from t where c = 3 and b > 1 order by b",
        "Plan": [
          "IndexReader_15 8000.00 root  index:IndexRangeScan_16",
          "└─IndexRangeScan_16 33.33 INTERLOCK[einsteindb] block:t, index:idx_c_b(c, b) range:(3 1,3 +inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 2 3"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a, b from t where c > 1 and b > 1 order by c",
        "Plan": [
          "Projection_14 8000.00 root  test.t.a, test.t.b",
          "└─IndexReader_18 8000.00 root  index:Selection_19",
          "  └─Selection_19 2666.67 INTERLOCK[einsteindb]  gt(test.t.b, 1)",
          "    └─IndexRangeScan_20 3333.33 INTERLOCK[einsteindb] block:t, index:idx_c_b(c, b) range:(1,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 2",
          "4 5",
          "7 8"
        ]
      }
    ]
  },
  {
    "Name": "TestJoin",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select t1.a, t1.b from t1, t2 where t1.a = t2.a and t1.a > 2",
        "Plan": [
          "Projection_16 4166.67 root  test.t1.a, test.t1.b",
          "└─MergeJoin_19 4166.67 root  inner join, left key:test.t1.a, right key:test.t2.a",
          "  ├─BlockReader_27(Build) 3333.33 root  data:BlockRangeScan_28",
          "  │ └─BlockRangeScan_28 3333.33 INTERLOCK[einsteindb] block:t2 range:(2,+inf], keep order:true, stats:pseudo",
          "  └─BlockReader_24(Probe) 3333.33 root  data:BlockRangeScan_25",
          "    └─BlockRangeScan_25 3333.33 INTERLOCK[einsteindb] block:t1 range:(2,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "3 33"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select t1.a, t1.b from t1, t2 where t1.a > t2.a and t2.b > 200",
        "Plan": [
          "Projection_12 80000000.00 root  test.t1.a, test.t1.b",
          "└─HashJoin_14 80000000.00 root  CARTESIAN inner join, other cond:gt(test.t1.a, test.t2.a)",
          "  ├─BlockReader_17(Build) 8000.00 root  data:Selection_18",
          "  │ └─Selection_18 8000.00 INTERLOCK[einsteindb]  gt(test.t2.b, 200)",
          "  │   └─BlockFullScan_19 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo",
          "  └─BlockReader_15(Probe) 10000.00 root  data:BlockFullScan_16",
          "    └─BlockFullScan_16 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo"
        ],
        "Result": [
          "3 33",
          "4 44",
          "4 44"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select t1.a, t1.b from t1 left join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200",
        "Plan": [
          "Projection_17 3333.33 root  test.t1.a, test.t1.b",
          "└─Selection_18 3333.33 root  gt(test.t2.b, 200)",
          "  └─MergeJoin_21 4166.67 root  left outer join, left key:test.t1.a, right key:test.t2.a",
          "    ├─BlockReader_29(Build) 3333.33 root  data:BlockRangeScan_30",
          "    │ └─BlockRangeScan_30 3333.33 INTERLOCK[einsteindb] block:t2 range:(2,+inf], keep order:true, stats:pseudo",
          "    └─BlockReader_26(Probe) 3333.33 root  data:BlockRangeScan_27",
          "      └─BlockRangeScan_27 3333.33 INTERLOCK[einsteindb] block:t1 range:(2,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "3 33"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select t2.a, t2.b from t1 right join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200",
        "Plan": [
          "Projection_13 8000.00 root  test.t2.a, test.t2.b",
          "└─Selection_14 8000.00 root  gt(test.t1.a, 2)",
          "  └─MergeJoin_17 10000.00 root  right outer join, left key:test.t1.a, right key:test.t2.a",
          "    ├─BlockReader_23(Build) 10000.00 root  data:BlockFullScan_24",
          "    │ └─BlockFullScan_24 10000.00 INTERLOCK[einsteindb] block:t1 keep order:true, stats:pseudo",
          "    └─BlockReader_26(Probe) 8000.00 root  data:Selection_27",
          "      └─Selection_27 8000.00 INTERLOCK[einsteindb]  gt(test.t2.b, 200)",
          "        └─BlockFullScan_28 10000.00 INTERLOCK[einsteindb] block:t2 keep order:true, stats:pseudo"
        ],
        "Result": [
          "3 333"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select t1.a, t1.b from t1, t2 where t1.a = t2.a order by t1.a",
        "Plan": [
          "Projection_12 12500.00 root  test.t1.a, test.t1.b",
          "└─MergeJoin_13 12500.00 root  inner join, left key:test.t1.a, right key:test.t2.a",
          "  ├─BlockReader_19(Build) 10000.00 root  data:BlockFullScan_20",
          "  │ └─BlockFullScan_20 10000.00 INTERLOCK[einsteindb] block:t2 keep order:true, stats:pseudo",
          "  └─BlockReader_14(Probe) 10000.00 root  data:BlockFullScan_15",
          "    └─BlockFullScan_15 10000.00 INTERLOCK[einsteindb] block:t1 keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select * from t1 join t2 on t1.a = t2.a",
        "Plan": [
          "MergeJoin_11 12500.00 root  inner join, left key:test.t1.a, right key:test.t2.a",
          "├─BlockReader_19(Build) 10000.00 root  data:BlockFullScan_20",
          "│ └─BlockFullScan_20 10000.00 INTERLOCK[einsteindb] block:t2 keep order:true, stats:pseudo",
          "└─BlockReader_16(Probe) 10000.00 root  data:BlockFullScan_17",
          "  └─BlockFullScan_17 10000.00 INTERLOCK[einsteindb] block:t1 keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11 1 111",
          "2 22 2 222",
          "3 33 3 333"
        ]
      }
    ]
  },
  {
    "Name": "TestApply",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select a = (select a from t2 where t1.b = t2.b order by a limit 1) from t1",
        "Plan": [
          "Projection_18 10000.00 root  eq(test.t1.a, test.t2.a)->DeferredCauset#5",
          "└─Apply_20 10000.00 root  CARTESIAN left outer join",
          "  ├─BlockReader_21(Build) 10000.00 root  data:BlockFullScan_22",
          "  │ └─BlockFullScan_22 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "  └─MaxOneRow_23(Probe) 1.00 root  ",
          "    └─Projection_24 1.00 root  test.t2.a",
          "      └─Limit_26 1.00 root  offset:0, count:1",
          "        └─BlockReader_34 1.00 root  data:Limit_35",
          "          └─Limit_35 1.00 INTERLOCK[einsteindb]  offset:0, count:1",
          "            └─Selection_32 1.00 INTERLOCK[einsteindb]  eq(test.t1.b, test.t2.b)",
          "              └─BlockFullScan_33 1.00 INTERLOCK[einsteindb] block:t2 keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "1",
          "1",
          "<nil>"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select sum(a), (select t1.a from t1 where t1.a = t2.a limit 1), (select t1.b from t1 where t1.b = t2.b limit 1) from t2",
        "Plan": [
          "Projection_30 1.00 root  DeferredCauset#3, test.t1.a, test.t1.b",
          "└─Apply_32 1.00 root  CARTESIAN left outer join",
          "  ├─Apply_34(Build) 1.00 root  CARTESIAN left outer join",
          "  │ ├─HashAgg_39(Build) 1.00 root  funcs:sum(DeferredCauset#8)->DeferredCauset#3, funcs:firstrow(DeferredCauset#9)->test.t2.a, funcs:firstrow(DeferredCauset#10)->test.t2.b",
          "  │ │ └─BlockReader_40 1.00 root  data:HashAgg_41",
          "  │ │   └─HashAgg_41 1.00 INTERLOCK[einsteindb]  funcs:sum(test.t2.a)->DeferredCauset#8, funcs:firstrow(test.t2.a)->DeferredCauset#9, funcs:firstrow(test.t2.b)->DeferredCauset#10",
          "  │ │     └─BlockFullScan_38 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo",
          "  │ └─MaxOneRow_42(Probe) 1.00 root  ",
          "  │   └─Limit_43 1.00 root  offset:0, count:1",
          "  │     └─BlockReader_44 1.00 root  data:Limit_45",
          "  │       └─Limit_45 1.00 INTERLOCK[einsteindb]  offset:0, count:1",
          "  │         └─Selection_46 1.00 INTERLOCK[einsteindb]  eq(test.t1.a, test.t2.a)",
          "  │           └─BlockFullScan_47 1.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "  └─MaxOneRow_48(Probe) 1.00 root  ",
          "    └─Limit_49 1.00 root  offset:0, count:1",
          "      └─BlockReader_50 1.00 root  data:Limit_51",
          "        └─Limit_51 1.00 INTERLOCK[einsteindb]  offset:0, count:1",
          "          └─Selection_52 1.00 INTERLOCK[einsteindb]  eq(test.t1.b, test.t2.b)",
          "            └─BlockFullScan_53 1.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo"
        ],
        "Result": [
          "6 1 11"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select a from t1 where exists(select 1 from t2 where t1.a = t2.a)",
        "Plan": [
          "MergeJoin_27 10000.00 root  semi join, left key:test.t1.a, right key:test.t2.a",
          "├─BlockReader_32(Build) 10000.00 root  data:BlockFullScan_33",
          "│ └─BlockFullScan_33 10000.00 INTERLOCK[einsteindb] block:t2 keep order:true, stats:pseudo",
          "└─BlockReader_29(Probe) 10000.00 root  data:BlockFullScan_30",
          "  └─BlockFullScan_30 10000.00 INTERLOCK[einsteindb] block:t1 keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "2",
          "3"
        ]
      }
    ]
  },
  {
    "Name": "TestMemBlockScan",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select * from information_schema.processlist",
        "Plan": [
          "MemBlockScan_3 10000.00 root block:PROCESSLIST "
        ],
        "Result": null
      }
    ]
  },
  {
    "Name": "TestTopN",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select a from (select a from t where b > 2 order by a limit 3 offset 1) as t1 order by a limit 2 offset 1",
        "Plan": [
          "Projection_22 2.00 root  test.t.a",
          "└─Limit_24 2.00 root  offset:2, count:2",
          "  └─BlockReader_32 4.00 root  data:Limit_33",
          "    └─Limit_33 4.00 INTERLOCK[einsteindb]  offset:0, count:4",
          "      └─Selection_30 4.00 INTERLOCK[einsteindb]  gt(test.t.b, 2)",
          "        └─BlockFullScan_31 4.00 INTERLOCK[einsteindb] block:t keep order:true, stats:pseudo"
        ],
        "Result": [
          "3",
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select * from (select * from t order by a limit 3) as t1 order by a limit 5",
        "Plan": [
          "Limit_15 3.00 root  offset:0, count:3",
          "└─BlockReader_21 3.00 root  data:Limit_22",
          "  └─Limit_22 3.00 INTERLOCK[einsteindb]  offset:0, count:3",
          "    └─BlockFullScan_20 3.00 INTERLOCK[einsteindb] block:t keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select b from (select b from t order by b limit 10 offset 10) as t1 order by b limit 10 offset 5",
        "Plan": [
          "TopN_14 5.00 root  test.t.b, offset:15, count:5",
          "└─BlockReader_16 20.00 root  data:TopN_17",
          "  └─TopN_17 20.00 INTERLOCK[einsteindb]  test.t.b, offset:0, count:20",
          "    └─BlockFullScan_19 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": null
      },
      {
        "ALLEGROALLEGROSQL": "select b from (select b from t order by b limit 10 offset 2) as t1 order by b limit 3 offset 5",
        "Plan": [
          "TopN_14 3.00 root  test.t.b, offset:7, count:3",
          "└─BlockReader_16 10.00 root  data:TopN_17",
          "  └─TopN_17 10.00 INTERLOCK[einsteindb]  test.t.b, offset:0, count:10",
          "    └─BlockFullScan_19 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": null
      },
      {
        "ALLEGROALLEGROSQL": "select a from (select a from t order by a limit 3 offset 5) as t1 order by a limit 3 offset 5",
        "Plan": [
          "BlockDual_11 0.00 root  rows:0"
        ],
        "Result": null
      },
      {
        "ALLEGROALLEGROSQL": "select a from (select a from t where b > 2 order by a, b limit 3 offset 1) as t1 order by a limit 2 offset 1",
        "Plan": [
          "Projection_22 2.00 root  test.t.a",
          "└─TopN_23 2.00 root  test.t.a, test.t.b, offset:2, count:2",
          "  └─BlockReader_25 4.00 root  data:TopN_26",
          "    └─TopN_26 4.00 INTERLOCK[einsteindb]  test.t.a, test.t.b, offset:0, count:4",
          "      └─Selection_28 8000.00 INTERLOCK[einsteindb]  gt(test.t.b, 2)",
          "        └─BlockFullScan_29 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "3",
          "4"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select * from (select * from t order by a limit 3) as t1 order by a, b limit 5",
        "Plan": [
          "Limit_14 3.00 root  offset:0, count:5",
          "└─Sort_26 3.00 root  test.t.a, test.t.b",
          "  └─Limit_16 3.00 root  offset:0, count:3",
          "    └─BlockReader_22 3.00 root  data:Limit_23",
          "      └─Limit_23 3.00 INTERLOCK[einsteindb]  offset:0, count:3",
          "        └─BlockFullScan_21 3.00 INTERLOCK[einsteindb] block:t keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33"
        ]
      }
    ]
  },
  {
    "Name": "TestCascadePlannerHashedPartBlock",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select * from pt1",
        "Plan": [
          "BlockReader_5 10000.00 root partition:all data:BlockFullScan_6",
          "└─BlockFullScan_6 10000.00 INTERLOCK[einsteindb] block:pt1 keep order:false, stats:pseudo"
        ],
        "Result": [
          "4 40",
          "1 10",
          "5 50",
          "2 20",
          "3 30"
        ]
      }
    ]
  },
  {
    "Name": "TestInlineProjection",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1, t2 where t1.a = t2.a;",
        "Plan": [
          "Projection_14 10000.00 root  test.t1.b, test.t2.b",
          "└─HashJoin_15 10000.00 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "  ├─BlockReader_17(Build) 8000.00 root  data:Selection_18",
          "  │ └─Selection_18 8000.00 INTERLOCK[einsteindb]  not(isnull(test.t1.a))",
          "  │   └─BlockFullScan_19 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "  └─BlockReader_20(Probe) 8000.00 root  data:Selection_21",
          "    └─Selection_21 8000.00 INTERLOCK[einsteindb]  not(isnull(test.t2.a))",
          "      └─BlockFullScan_22 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_9 12500.00 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─BlockReader_11(Build) 10000.00 root  data:BlockFullScan_12",
          "│ └─BlockFullScan_12 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "└─BlockReader_13(Probe) 10000.00 root  data:BlockFullScan_14",
          "  └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1 left outer join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_10 12500.00 root  left outer join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─BlockReader_13(Build) 10000.00 root  data:BlockFullScan_14",
          "│ └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo",
          "└─BlockReader_11(Probe) 10000.00 root  data:BlockFullScan_12",
          "  └─BlockFullScan_12 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1",
          "2 <nil>"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1 right outer join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_9 12500.00 root  right outer join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─BlockReader_11(Build) 10000.00 root  data:BlockFullScan_12",
          "│ └─BlockFullScan_12 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "└─BlockReader_13(Probe) 10000.00 root  data:BlockFullScan_14",
          "  └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1",
          "<nil> 3"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select 1 from (select /*+ HASH_JOIN(t1) */ t1.a in (select t2.a from t2) from t1) x;",
        "Plan": [
          "Projection_17 10000.00 root  1->DeferredCauset#8",
          "└─HashJoin_18 10000.00 root  CARTESIAN left outer semi join, other cond:eq(test.t1.a, test.t2.a)",
          "  ├─IndexReader_25(Build) 10000.00 root  index:IndexFullScan_26",
          "  │ └─IndexFullScan_26 10000.00 INTERLOCK[einsteindb] block:t2, index:idx_a(a) keep order:false, stats:pseudo",
          "  └─IndexReader_21(Probe) 10000.00 root  index:IndexFullScan_22",
          "    └─IndexFullScan_22 10000.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:false, stats:pseudo"
        ],
        "Result": [
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select 1 from (select /*+ HASH_JOIN(t1) */ t1.a not in (select t2.a from t2) from t1) x;",
        "Plan": [
          "Projection_17 10000.00 root  1->DeferredCauset#8",
          "└─HashJoin_18 10000.00 root  CARTESIAN anti left outer semi join, other cond:eq(test.t1.a, test.t2.a)",
          "  ├─IndexReader_25(Build) 10000.00 root  index:IndexFullScan_26",
          "  │ └─IndexFullScan_26 10000.00 INTERLOCK[einsteindb] block:t2, index:idx_a(a) keep order:false, stats:pseudo",
          "  └─IndexReader_21(Probe) 10000.00 root  index:IndexFullScan_22",
          "    └─IndexFullScan_22 10000.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:false, stats:pseudo"
        ],
        "Result": [
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_9 12500.00 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─BlockReader_11(Build) 10000.00 root  data:BlockFullScan_12",
          "│ └─BlockFullScan_12 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "└─BlockReader_13(Probe) 10000.00 root  data:BlockFullScan_14",
          "  └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_HASH_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_9 12500.00 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─BlockReader_11(Build) 10000.00 root  data:BlockFullScan_12",
          "│ └─BlockFullScan_12 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "└─BlockReader_13(Probe) 10000.00 root  data:BlockFullScan_14",
          "  └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_MERGE_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_9 12500.00 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─BlockReader_11(Build) 10000.00 root  data:BlockFullScan_12",
          "│ └─BlockFullScan_12 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "└─BlockReader_13(Probe) 10000.00 root  data:BlockFullScan_14",
          "  └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MERGE_JOIN(t1, t2) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": [
          "HashJoin_9 12500.00 root  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "├─BlockReader_12(Build) 10000.00 root  data:BlockFullScan_13",
          "│ └─BlockFullScan_13 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "└─BlockReader_14(Probe) 10000.00 root  data:BlockFullScan_15",
          "  └─BlockFullScan_15 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 1"
        ]
      }
    ]
  }
]
