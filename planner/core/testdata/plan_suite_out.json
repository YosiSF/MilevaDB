[
  {
    "Name": "TestHintSINTERLOCKe",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ MERGE_JOIN(t1) */ t1.a, t1.b from t t1, (select /*+ INL_JOIN(t3) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->IndexJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MERGE_JOIN(test.t1) */ t1.a, t1.b from t t1, (select /*+ INL_JOIN(test.t3) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->IndexJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MERGE_JOIN(t1) */ t1.a, t1.b from t t1, (select /*+ HASH_JOIN(t2) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)->Sort}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_JOIN(t1) */ t1.a, t1.b from t t1, (select /*+ HASH_JOIN(t2) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "IndexJoin{BlockReader(Block(t))->LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_JOIN(test.t1) */ t1.a, t1.b from t t1, (select /*+ HASH_JOIN(test.t2) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "IndexJoin{BlockReader(Block(t))->LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_JOIN(t1) */ t1.a, t1.b from t t1, (select /*+ MERGE_JOIN(t2) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "IndexJoin{BlockReader(Block(t))->MergeInnerJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.a, t1.b from t t1, (select /*+ MERGE_JOIN(t2) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "RightHashJoin{BlockReader(Block(t))->MergeInnerJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(test.t1) */ t1.a, t1.b from t t1, (select /*+ MERGE_JOIN(test.t2) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "RightHashJoin{BlockReader(Block(t))->MergeInnerJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.a, t1.b from t t1, (select /*+ INL_JOIN(t2) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "RightHashJoin{BlockReader(Block(t))->IndexJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.c,test.t.a)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MERGE_JOIN(t1) */ t1.a, t1.b from t t1, (select t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->MergeInnerJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_JOIN(t1) */ t1.a, t1.b from t t1, (select t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "IndexJoin{BlockReader(Block(t))->LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.a, t1.b from t t1, (select t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Best": "RightHashJoin{BlockReader(Block(t))->LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(@sel_2 t1@sel_2, t2@sel_2), MERGE_JOIN(@sel_1 t1@sel_1, t2@sel_1) */ * from (select t1.a, t1.b from t t1, t t2 where t1.a = t2.a) t1, t t2 where t1.b = t2.b",
        "Best": "MergeInnerJoin{LeftHashJoin{BlockReader(Block(t))->IndexReader(Index(t.f)[[NULL,+inf]])}(test.t.a,test.t.a)->Sort->BlockReader(Block(t))->Sort}(test.t.b,test.t.b)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG() */ s, count(s) from (select /*+ HASH_AGG() */ sum(t1.a) as s from t t1, t t2 where t1.a = t2.b group by t1.a) p group by s",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->BlockReader(Block(t))}(test.t.a,test.t.b)->Projection->HashAgg->Sort->StreamAgg->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ s, count(s) from (select /*+ STREAM_AGG() */ sum(t1.a) as s from t t1, t t2 where t1.a = t2.b group by t1.a) p group by s",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->BlockReader(Block(t))}(test.t.a,test.t.b)->Sort->Projection->StreamAgg->HashAgg->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ s, count(s) from (select sum(t1.a) as s from t t1, t t2 where t1.a = t2.b group by t1.a) p group by s",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->BlockReader(Block(t))}(test.t.a,test.t.b)->Projection->HashAgg->HashAgg->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG() */ s, count(s) from (select sum(t1.a) as s from t t1, t t2 where t1.a = t2.b group by t1.a) p group by s",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->BlockReader(Block(t))}(test.t.a,test.t.b)->Projection->HashAgg->Sort->StreamAgg->Projection"
      }
    ]
  },
  {
    "Name": "TestIndexHint",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t, c_d_e) */ * from t",
        "Best": "IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t` `c_d_e`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(test.t, c_d_e) */ * from t",
        "Best": "IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t` `c_d_e`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ IGNORE_INDEX(t, c_d_e) */ c from t order by c",
        "Best": "BlockReader(Block(t))->Sort",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ IGNORE_INDEX(test.t, c_d_e) */ c from t order by c",
        "Best": "BlockReader(Block(t))->Sort",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t, c_d_e) */ * from t t1",
        "Best": "BlockReader(Block(t))",
        "HasWarn": true,
        "Hints": "use_index(@`sel_1` `test`.`t1` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ IGNORE_INDEX(t, c_d_e) */ t1.c from t t1 order by t1.c",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]])",
        "HasWarn": true,
        "Hints": "use_index(@`sel_1` `test`.`t1` `c_d_e`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t1, c_d_e) */ * from t t1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t1` `c_d_e`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ IGNORE_INDEX(t1, c_d_e) */ t1.c from t t1 order by t1.c",
        "Best": "BlockReader(Block(t))->Sort",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t1` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t1, c_d_e), USE_INDEX(t2, f) */ * from t t1, t t2 where t1.a = t2.b",
        "Best": "LeftHashJoin{IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))->IndexLookUp(Index(t.f)[[NULL,+inf]], Block(t))}(test.t.a,test.t.b)",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t1` `c_d_e`), use_index(@`sel_1` `test`.`t2` `f`), hash_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ IGNORE_INDEX(t1, c_d_e), IGNORE_INDEX(t2, f), HASH_JOIN(t1) */ * from t t1, t t2 where t1.a = t2.b",
        "Best": "LeftHashJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.b)",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_1` `test`.`t2` ), hash_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t, c_d_e, f, g) */ * from t order by f",
        "Best": "IndexLookUp(Index(t.f)[[NULL,+inf]], Block(t))",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t` `f`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t) */ f from t where f > 10",
        "Best": "BlockReader(Block(t)->Sel([gt(test.t.f, 10)]))",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t, no_such_index) */ * from t",
        "Best": "BlockReader(Block(t))",
        "HasWarn": true,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ IGNORE_INDEX(t, no_such_index) */ * from t",
        "Best": "BlockReader(Block(t))",
        "HasWarn": true,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t, c_d_e), IGNORE_INDEX(t, f) */ c from t order by c",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]])",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t` `c_d_e`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t, f), IGNORE_INDEX(t, f) */ c from t order by c",
        "Best": "BlockReader(Block(t))->Sort",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t, c_d_e), IGNORE_INDEX(t, c_d_e) */ c from t order by c",
        "Best": "BlockReader(Block(t))->Sort",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX(t, c_d_e, f), IGNORE_INDEX(t, c_d_e) */ c from t order by c",
        "Best": "IndexLookUp(Index(t.f)[[NULL,+inf]], Block(t))->Sort",
        "HasWarn": false,
        "Hints": "use_index(@`sel_1` `test`.`t` `f`)"
      }
    ]
  },
  {
    "Name": "TestIndexMergeHint",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX_MERGE(t, c_d_e, f_g) */ * from t where c < 1 or f > 2",
        "Best": "IndexMergeReader(PartialPlans->[Index(t.c_d_e)[[-inf,1)], Index(t.f_g)[(2,+inf]]], BlockPlan->Block(t))",
        "HasWarn": false,
        "Hints": "use_index_merge(@`sel_1` `t` `c_d_e`, `f_g`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX_MERGE(t, primary, f_g) */ * from t where a < 1 or f > 2",
        "Best": "IndexMergeReader(PartialPlans->[Block(t), Index(t.f_g)[(2,+inf]]], BlockPlan->Block(t))",
        "HasWarn": false,
        "Hints": "use_index_merge(@`sel_1` `t` `primary`, `f_g`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX_MERGE(t, primary, f_g, c_d_e) */ * from t where a < 1 or f > 2",
        "Best": "IndexMergeReader(PartialPlans->[Block(t), Index(t.f_g)[(2,+inf]]], BlockPlan->Block(t))",
        "HasWarn": false,
        "Hints": "use_index_merge(@`sel_1` `t` `primary`, `f_g`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ NO_INDEX_MERGE(), USE_INDEX_MERGE(t, primary, f_g, c_d_e) */ * from t where a < 1 or f > 2",
        "Best": "BlockReader(Block(t)->Sel([or(lt(test.t.a, 1), gt(test.t.f, 2))]))",
        "HasWarn": true,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX_MERGE(t1, c_d_e, f_g) */ * from t where c < 1 or f > 2",
        "Best": "BlockReader(Block(t)->Sel([or(lt(test.t.c, 1), gt(test.t.f, 2))]))",
        "HasWarn": true,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ NO_INDEX_MERGE(), USE_INDEX_MERGE(t, primary, f_g, c_d_e) */ * from t where a < 1 or f > 2",
        "Best": "BlockReader(Block(t)->Sel([or(lt(test.t.a, 1), gt(test.t.f, 2))]))",
        "HasWarn": true,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX_MERGE(t) USE_INDEX_MERGE(t) */ * from t where c < 1 or f > 2",
        "Best": "IndexMergeReader(PartialPlans->[Index(t.c_d_e)[[-inf,1)], Index(t.f_g)[(2,+inf]]], BlockPlan->Block(t))",
        "HasWarn": false,
        "Hints": "use_index_merge(@`sel_1` `t` `c_d_e`, `f_g`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX_MERGE(db2.t) */ * from t where c < 1 or f > 2",
        "Best": "BlockReader(Block(t)->Sel([or(lt(test.t.c, 1), gt(test.t.f, 2))]))",
        "HasWarn": true,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ USE_INDEX_MERGE(db2.t, c_d_e, f_g) */ * from t where c < 1 or f > 2",
        "Best": "BlockReader(Block(t)->Sel([or(lt(test.t.c, 1), gt(test.t.f, 2))]))",
        "HasWarn": true,
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      }
    ]
  },
  {
    "Name": "TestPosetDagPlanBuilderSimpleCase",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select * from t t1 use index(c_d_e)",
        "Best": "IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))"
      },
      {
        "ALLEGROALLEGROSQL": "select f from t use index() where f = 1",
        "Best": "BlockReader(Block(t)->Sel([eq(test.t.f, 1)]))"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where a between 1 and 2 order by c",
        "Best": "BlockReader(Block(t))->Sort->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where (t.c > 0 and t.c < 2) or (t.c > 4 and t.c < 6) or (t.c > 8 and t.c < 10) or (t.c > 12 and t.c < 14) or (t.c > 16 and t.c < 18)",
        "Best": "IndexLookUp(Index(t.c_d_e)[(0,2) (4,6) (8,10) (12,14) (16,18)], Block(t))"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where (t.c > 0 and t.c < 1) or (t.c > 2 and t.c < 3) or (t.c > 4 and t.c < 5) or (t.c > 6 and t.c < 7) or (t.c > 9 and t.c < 10)",
        "Best": "Dual"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where t.c = 1 and t.e = 1 order by t.b limit 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]]->Sel([eq(test.t.e, 1)]), Block(t))->TopN([test.t.b],0,1)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where t.e_str is null",
        "Best": "IndexLookUp(Index(t.e_d_c_str_prefix)[[NULL,NULL]], Block(t))"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where t.c is null",
        "Best": "Dual"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where t.c = 1 and t.e = 1 order by t.e limit 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]]->Sel([eq(test.t.e, 1)]), Block(t))->TopN([test.t.e],0,1)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where t.c = 1 and t.e = 1 order by t.d limit 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]]->Sel([eq(test.t.e, 1)])->Limit, Block(t))"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t where t.c = 1 and t.e = 1 order by t.d limit 1",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]]->Sel([eq(test.t.e, 1)])->Limit)->Limit->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t order by t.a limit 1",
        "Best": "BlockReader(Block(t)->Limit)->Limit->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t order by t.a + t.b limit 1",
        "Best": "BlockReader(Block(t)->TopN([plus(test.t.a, test.t.b)],0,1))->Projection->TopN([DeferredCauset#14],0,1)->Projection->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t  limit 1",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]]->Limit)->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t where c = 1 limit 1",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]]->Limit)->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t where c = 1",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]])"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t order by c",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]])"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t where c = 1 order by e",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]])->Sort->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select c, b from t where c = 1 limit 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]]->Limit, Block(t))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select c, b from t where c = 1 and e = 1 and b = 1 limit 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]]->Sel([eq(test.t.e, 1)]), Block(t)->Sel([eq(test.t.b, 1)])->Limit)->Limit->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t where c = 1 order by d, c",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]])->Sort->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select c_str from t where e_str = '1' order by d_str, c_str",
        "Best": "IndexLookUp(Index(t.e_d_c_str_prefix)[[\"1\",\"1\"]], Block(t))->Sort->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t where t.c = 1 and t.a > 1 order by t.d limit 1",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]]->Sel([gt(test.t.a, 1)])->Limit)->Limit->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t where t.c = 1 and t.d = 1 order by t.a limit 1",
        "Best": "IndexReader(Index(t.c_d_e)[[1 1,1 1]])->TopN([test.t.a],0,1)->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where t.c = 1 and t.a > 1 order by t.d limit 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]]->Sel([gt(test.t.a, 1)])->Limit, Block(t))"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t use index(e_d_c_str_prefix) where t.c_str = 'abcdefghijk' and t.d_str = 'd' and t.e_str = 'e'",
        "Best": "IndexLookUp(Index(t.e_d_c_str_prefix)[[\"e\" \"d\" \"abcdefghij\",\"e\" \"d\" \"abcdefghij\"]], Block(t)->Sel([eq(test.t.c_str, abcdefghijk)]))"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t use index(e_d_c_str_prefix) where t.e_str = b'1110000'",
        "Best": "IndexLookUp(Index(t.e_d_c_str_prefix)[[\"p\",\"p\"]], Block(t))"
      },
      {
        "ALLEGROALLEGROSQL": "select * from (select * from t use index() order by b) t left join t t1 on t.a=t1.a limit 10",
        "Best": "IndexMergeJoin{BlockReader(Block(t)->TopN([test.t.b],0,10))->TopN([test.t.b],0,10)->BlockReader(Block(t))}(test.t.a,test.t.a)->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select * from ((SELECT 1 a,3 b) UNION (SELECT 2,1) ORDER BY (SELECT 2)) t order by a,b",
        "Best": "UnionAll{Dual->Projection->Dual->Projection}->HashAgg->Sort"
      },
      {
        "ALLEGROALLEGROSQL": "select * from ((SELECT 1 a,6 b) UNION (SELECT 2,5) UNION (SELECT 2, 4) ORDER BY 1) t order by 1, 2",
        "Best": "UnionAll{Dual->Projection->Dual->Projection->Dual->Projection}->HashAgg->Sort->Sort"
      },
      {
        "ALLEGROALLEGROSQL": "select * from (select *, NULL as xxx from t) t order by xxx",
        "Best": "BlockReader(Block(t))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t use index(f) where f = 1 and a = 1",
        "Best": "PointGet(Index(t.f)[HoTTInt64 1])->Sel([eq(test.t.a, 1)])"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t2 use index(b) where b = 1 and a = 1",
        "Best": "PointGet(Index(t2.b)[HoTTInt64 1])->Sel([eq(test.t2.a, 1)])"
      }
    ]
  },
  {
    "Name": "TestPosetDagPlanBuilderJoin",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select * from t t1 join t t2 on t1.a = t2.c_str",
        "Best": "LeftHashJoin{BlockReader(Block(t))->Projection->BlockReader(Block(t))->Projection}(DeferredCauset#25,DeferredCauset#26)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 join t t2 on t1.b = t2.a",
        "Best": "LeftHashJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.b,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 join t t2 on t1.a = t2.a join t t3 on t1.a = t3.a",
        "Best": "LeftHashJoin{MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 join t t2 on t1.a = t2.a join t t3 on t1.b = t3.a",
        "Best": "LeftHashJoin{MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->BlockReader(Block(t))}(test.t.b,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 join t t2 on t1.b = t2.a order by t1.a",
        "Best": "IndexJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.b,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 join t t2 on t1.b = t2.a order by t1.a limit 1",
        "Best": "IndexJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.b,test.t.a)->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_HJ(t1, t2) */ * from t t1 join t t2 on t1.b = t2.a order by t1.a limit 1",
        "Best": "LeftHashJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.b,test.t.a)->TopN([test.t.a],0,1)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 left join t t2 on t1.b = t2.a where 1 = 1 limit 1",
        "Best": "IndexMergeJoin{BlockReader(Block(t)->Limit)->Limit->BlockReader(Block(t))}(test.t.b,test.t.a)->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 join t t2 on t1.b = t2.a and t1.c = 1 and t1.d = 1 and t1.e = 1 order by t1.a limit 1",
        "Best": "IndexMergeJoin{PointGet(Index(t.c_d_e)[HoTTInt64 1 HoTTInt64 1 HoTTInt64 1])->BlockReader(Block(t))}(test.t.b,test.t.a)->TopN([test.t.a],0,1)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 join t t2 on t1.b = t2.b join t t3 on t1.b = t3.b",
        "Best": "LeftHashJoin{LeftHashJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.b,test.t.b)->BlockReader(Block(t))}(test.t.b,test.t.b)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 join t t2 on t1.a = t2.a order by t1.a",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 left outer join t t2 on t1.a = t2.a right outer join t t3 on t1.a = t3.a",
        "Best": "RightHashJoin{MergeLeftOuterJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 join t t2 on t1.a = t2.a join t t3 on t1.a = t3.a and t1.b = 1 and t3.c = 1",
        "Best": "IndexMergeJoin{IndexMergeJoin{BlockReader(Block(t)->Sel([eq(test.t.b, 1)]))->IndexLookUp(Index(t.c_d_e)[[1,1]], Block(t))}(test.t.a,test.t.a)->BlockReader(Block(t))}(test.t.a,test.t.a)->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where t.c in (select b from t s where s.a = t.a)",
        "Best": "MergeSemiJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select t.c in (select b from t s where s.a = t.a) from t",
        "Best": "LeftHashJoin{IndexReader(Index(t.c_d_e)[[NULL,+inf]])->BlockReader(Block(t))}(test.t.a,test.t.a)(test.t.c,test.t.b)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.a = t2.b",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))->Sort}(test.t.a,test.t.b)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.a = t2.a",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.a = t2.a order by t2.a",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.b = t2.b order by t2.a",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->Sort->BlockReader(Block(t))->Sort}(test.t.b,test.t.b)->Sort"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.a = t2.a order by t2.a desc",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.b = t2.b order by t2.b desc",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->Sort->BlockReader(Block(t))->Sort}(test.t.b,test.t.b)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2,t3)*/ * from t t1, t t2, t t3 where t1.a = t2.a and t2.a = t3.a",
        "Best": "MergeInnerJoin{MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2,t3)*/ * from t t1, t t2, t t3 where t1.a = t2.b and t2.a = t3.b",
        "Best": "MergeInnerJoin{MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))->Sort}(test.t.a,test.t.b)->Sort->BlockReader(Block(t))->Sort}(test.t.a,test.t.b)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2,t3)*/ * from t t1, t t2, t t3 where t1.c = t2.c and t1.d = t2.d and t3.c = t1.c and t3.d = t1.d",
        "Best": "MergeInnerJoin{MergeInnerJoin{IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))->IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))}(test.t.c,test.t.c)(test.t.d,test.t.d)->IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))}(test.t.c,test.t.c)(test.t.d,test.t.d)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2,t3)*/ * from t t1, t t2, t t3 where t1.c = t2.c and t1.d = t2.d and t3.c = t1.c and t3.d = t1.d order by t1.c",
        "Best": "MergeInnerJoin{MergeInnerJoin{IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))->IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))}(test.t.c,test.t.c)(test.t.d,test.t.d)->IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))}(test.t.c,test.t.c)(test.t.d,test.t.d)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2,t3)*/ * from t t1 left outer join t t2 on t1.a = t2.a left outer join t t3 on t2.a = t3.a",
        "Best": "MergeLeftOuterJoin{MergeLeftOuterJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1,t2,t3)*/ * from t t1 left outer join t t2 on t1.a = t2.a left outer join t t3 on t1.a = t3.a",
        "Best": "MergeLeftOuterJoin{MergeLeftOuterJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t1, t2) */ * from t t1, t t2 where t1.a = t2.a",
        "Best": "IndexJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1, t t2 where t1.a = t2.c",
        "Best": "IndexJoin{BlockReader(Block(t))->IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))}(test.t.a,test.t.c)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ t1.a , t2.a from t t1, t t2 where t1.a = t2.c",
        "Best": "IndexJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t1, t2) */ t1.a, t2.a from t t1, t t2 where t1.a = t2.a order by t1.c",
        "Best": "IndexJoin{IndexReader(Index(t.c_d_e)[[NULL,+inf]])->BlockReader(Block(t))}(test.t.a,test.t.a)->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t1, t2) */ t1.a, t2.a from t t1, t t2 where t1.a = t2.a order by t2.c",
        "Best": "IndexJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.a)->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t1) */ t1.a , t2.a from t t1, t t2 where t1.a = t2.c",
        "Best": "IndexJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.c,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t1, t2) */ * from t t1 left outer join t t2 on t1.a = t2.a and t2.b < 1",
        "Best": "IndexJoin{BlockReader(Block(t))->BlockReader(Block(t)->Sel([lt(test.t.b, 1)]))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t1, t2) */ * from t t1 join t t2 on t1.d=t2.d and t2.c = 1",
        "Best": "IndexJoin{BlockReader(Block(t))->IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))}(test.t.d,test.t.d)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t1, t2) */ * from t t1 left outer join t t2 on t1.a = t2.b",
        "Best": "LeftHashJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.b)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 right outer join t t2 on t1.a = t2.b",
        "Best": "RightHashJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.b)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 where t1.a in (select a from t t2)",
        "Best": "LeftHashJoin{BlockReader(Block(t))->IndexReader(Index(t.f)[[NULL,+inf]])}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t1) */ * from t t1 where t1.a in (select a from t t2)",
        "Best": "IndexJoin{BlockReader(Block(t))->IndexReader(Index(t.f)[[NULL,+inf]])}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 join t t2 where t1.c=t2.c and t1.f=t2.f",
        "Best": "IndexJoin{BlockReader(Block(t))->IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))}(test.t.c,test.t.c)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 join t t2 where t1.a = t2.a and t1.f=t2.f",
        "Best": "IndexJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 join t t2 where t1.f=t2.f and t1.a=t2.a",
        "Best": "IndexJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 join t t2 where t1.a=t2.a and t2.a in (1, 2)",
        "Best": "IndexJoin{BatchPointGet(Handle(t.a)[1 2])->BlockReader(Block(t)->Sel([in(test.t.a, 1, 2)]))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 join t t2 where t1.b=t2.c and t1.b=1 and t2.d > t1.d-10 and t2.d < t1.d+10",
        "Best": "IndexJoin{BlockReader(Block(t)->Sel([eq(test.t.b, 1)]))->IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))}"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 join t t2 where t1.b=t2.b and t1.c=1 and t2.c=1 and t2.d > t1.d-10 and t2.d < t1.d+10",
        "Best": "LeftHashJoin{IndexLookUp(Index(t.c_d_e)[[1,1]], Block(t))->IndexLookUp(Index(t.c_d_e)[[1,1]], Block(t))}(test.t.b,test.t.b)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 join t t2 where t2.c > t1.d-10 and t2.c < t1.d+10",
        "Best": "LeftHashJoin{BlockReader(Block(t))->BlockReader(Block(t))}"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 join t t2 where t1.b = t2.c and t2.c=1 and t2.d=2 and t2.e=4",
        "Best": "LeftHashJoin{BlockReader(Block(t)->Sel([eq(test.t.b, 1)]))->PointGet(Index(t.c_d_e)[HoTTInt64 1 HoTTInt64 2 HoTTInt64 4])}"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ * from t t1 join t t2 where t2.c=1 and t2.d=1 and t2.e > 10 and t2.e < 20",
        "Best": "LeftHashJoin{BlockReader(Block(t))->IndexLookUp(Index(t.c_d_e)[(1 1 10,1 1 20)], Block(t))}"
      }
    ]
  },
  {
    "Name": "TestPosetDagPlanBuilderSubquery",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select * from t where exists (select s.a from t s having sum(s.a) = t.a )",
        "Best": "LeftHashJoin{BlockReader(Block(t))->Projection->IndexReader(Index(t.f)[[NULL,+inf]]->StreamAgg)->StreamAgg}(DeferredCauset#27,DeferredCauset#25)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where exists (select s.a from t s having sum(s.a) = t.a ) order by t.a",
        "Best": "LeftHashJoin{BlockReader(Block(t))->Projection->IndexReader(Index(t.f)[[NULL,+inf]]->StreamAgg)->StreamAgg}(DeferredCauset#27,DeferredCauset#25)->Sort"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where a in (select s.a from t s) order by t.a",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where exists (select s.a from t s where s.c in (select c from t as k where k.d = s.d) having sum(s.a) = t.a )",
        "Best": "LeftHashJoin{BlockReader(Block(t))->Projection->MergeSemiJoin{IndexReader(Index(t.c_d_e)[[NULL,+inf]])->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.c,test.t.c)(test.t.d,test.t.d)->Projection->StreamAgg}(DeferredCauset#39,DeferredCauset#37)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where a in (select a from t) order by b",
        "Best": "LeftHashJoin{BlockReader(Block(t))->IndexReader(Index(t.f)[[NULL,+inf]])}(test.t.a,test.t.a)->Sort"
      },
      {
        "ALLEGROALLEGROSQL": "select t.c in (select count(*) from t s, t t1 where s.a = t.a and s.a = t1.a) from t",
        "Best": "Apply{IndexReader(Index(t.c_d_e)[[NULL,+inf]])->MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->StreamAgg}->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select (select count(*) from t s, t t1 where s.a = t.a and s.a = t1.a) from t",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.f)[[NULL,+inf]])}(test.t.a,test.t.a)->Projection}(test.t.a,test.t.a)->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select (select count(*) from t s, t t1 where s.a = t.a and s.a = t1.a) from t order by t.a",
        "Best": "MergeLeftOuterJoin{BlockReader(Block(t))->MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->Projection}(test.t.a,test.t.a)->Projection->Projection"
      }
    ]
  },
  {
    "Name": "TestPosetDagPlanTopN",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select * from t t1 left join t t2 on t1.b = t2.b left join t t3 on t2.b = t3.b order by t1.a limit 1",
        "Best": "LeftHashJoin{LeftHashJoin{BlockReader(Block(t)->Limit)->Limit->BlockReader(Block(t))}(test.t.b,test.t.b)->TopN([test.t.a],0,1)->BlockReader(Block(t))}(test.t.b,test.t.b)->TopN([test.t.a],0,1)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 left join t t2 on t1.b = t2.b left join t t3 on t2.b = t3.b order by t1.b limit 1",
        "Best": "LeftHashJoin{LeftHashJoin{BlockReader(Block(t)->TopN([test.t.b],0,1))->TopN([test.t.b],0,1)->BlockReader(Block(t))}(test.t.b,test.t.b)->TopN([test.t.b],0,1)->BlockReader(Block(t))}(test.t.b,test.t.b)->TopN([test.t.b],0,1)"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t t1 left join t t2 on t1.b = t2.b left join t t3 on t2.b = t3.b limit 1",
        "Best": "LeftHashJoin{LeftHashJoin{BlockReader(Block(t)->Limit)->Limit->BlockReader(Block(t))}(test.t.b,test.t.b)->Limit->BlockReader(Block(t))}(test.t.b,test.t.b)->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where b = 1 and c = 1 order by c limit 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]], Block(t)->Sel([eq(test.t.b, 1)]))->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where c = 1 order by c limit 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]]->Limit, Block(t))"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t order by a limit 1",
        "Best": "BlockReader(Block(t)->Limit)->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select c from t order by c limit 1",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]]->Limit)->Limit"
      }
    ]
  },
  {
    "Name": "TestPosetDagPlanBuilderBasePhysicalPlan",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select * from t order by b limit 1 for uFIDelate",
        "Best": "BlockReader(Block(t)->TopN([test.t.b],0,1))->TopN([test.t.b],0,1)->Lock",
        "Hints": "use_index(@`sel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "uFIDelate t set a = 5 where b < 1 order by d limit 1",
        "Best": "BlockReader(Block(t)->Sel([lt(test.t.b, 1)])->TopN([test.t.d],0,1))->TopN([test.t.d],0,1)->UFIDelate",
        "Hints": "use_index(@`uFIDel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "uFIDelate t set a = 5",
        "Best": "BlockReader(Block(t))->UFIDelate",
        "Hints": "use_index(@`uFIDel_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "delete /*+ MilevaDB_INLJ(t1, t2) */ t1 from t t1, t t2 where t1.c=t2.c",
        "Best": "IndexJoin{BlockReader(Block(t))->IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))}(test.t.c,test.t.c)->Delete",
        "Hints": "use_index(@`del_1` `test`.`t1` ), use_index(@`del_1` `test`.`t2` `c_d_e`), inl_join(@`del_1` `test`.`t2`)"
      },
      {
        "ALLEGROALLEGROSQL": "delete /*+ MilevaDB_SMJ(t1, t2) */ from t1 using t t1, t t2 where t1.c=t2.c",
        "Best": "MergeInnerJoin{IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))->IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t))}(test.t.c,test.t.c)->Delete",
        "Hints": "use_index(@`del_1` `test`.`t1` `c_d_e`), use_index(@`del_1` `test`.`t2` `c_d_e`), merge_join(@`del_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "uFIDelate /*+ MilevaDB_SMJ(t1, t2) */ t t1, t t2 set t1.a=1, t2.a=1 where t1.a=t2.a",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->UFIDelate",
        "Hints": "use_index(@`uFIDel_1` `test`.`t1` ), use_index(@`uFIDel_1` `test`.`t2` ), merge_join(@`uFIDel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "uFIDelate /*+ MilevaDB_HJ(t1, t2) */ t t1, t t2 set t1.a=1, t2.a=1 where t1.a=t2.a",
        "Best": "LeftHashJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->UFIDelate",
        "Hints": "use_index(@`uFIDel_1` `test`.`t1` ), use_index(@`uFIDel_1` `test`.`t2` ), hash_join(@`uFIDel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "delete from t where b < 1 order by d limit 1",
        "Best": "BlockReader(Block(t)->Sel([lt(test.t.b, 1)])->TopN([test.t.d],0,1))->TopN([test.t.d],0,1)->Delete",
        "Hints": "use_index(@`del_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "delete from t",
        "Best": "BlockReader(Block(t))->Delete",
        "Hints": "use_index(@`del_1` `test`.`t` )"
      },
      {
        "ALLEGROALLEGROSQL": "delete from t use index(c_d_e) where b = 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[NULL,+inf]], Block(t)->Sel([eq(test.t.b, 1)]))->Delete",
        "Hints": "use_index(@`del_1` `test`.`t` `c_d_e`)"
      },
      {
        "ALLEGROALLEGROSQL": "insert into t select * from t where b < 1 order by d limit 1",
        "Best": "BlockReader(Block(t)->Sel([lt(test.t.b, 1)])->TopN([test.t.d],0,1))->TopN([test.t.d],0,1)->Insert",
        "Hints": ""
      },
      {
        "ALLEGROALLEGROSQL": "insert into t (a, b, c, e, f, g) values(0,0,0,0,0,0)",
        "Best": "Insert",
        "Hints": ""
      },
      {
        "ALLEGROALLEGROSQL": "select 1",
        "Best": "Dual->Projection",
        "Hints": ""
      },
      {
        "ALLEGROALLEGROSQL": "select * from t where false",
        "Best": "Dual",
        "Hints": ""
      },
      {
        "ALLEGROALLEGROSQL": "show blocks",
        "Best": "Show",
        "Hints": ""
      }
    ]
  },
  {
    "Name": "TestPosetDagPlanBuilderUnion",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select * from t union all select * from t",
        "Best": "UnionAll{BlockReader(Block(t))->BlockReader(Block(t))}"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t union all (select * from t) order by a ",
        "Best": "UnionAll{BlockReader(Block(t))->BlockReader(Block(t))}->Sort"
      },
      {
        "ALLEGROALLEGROSQL": "select * from t union all (select * from t) limit 1",
        "Best": "UnionAll{BlockReader(Block(t)->Limit)->Limit->BlockReader(Block(t)->Limit)->Limit}->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t union all (select c from t) order by a limit 1",
        "Best": "UnionAll{BlockReader(Block(t)->Limit)->Limit->IndexReader(Index(t.c_d_e)[[NULL,+inf]]->Limit)->Limit}->TopN([DeferredCauset#25],0,1)"
      }
    ]
  },
  {
    "Name": "TestPosetDagPlanBuilderUnionScan",
    "Cases": null
  },
  {
    "Name": "TestPosetDagPlanBuilderAgg",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select distinct b from t",
        "Best": "BlockReader(Block(t))->HashAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select count(*) from (select * from t order by b) t group by b",
        "Best": "BlockReader(Block(t))->Sort->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select count(*), x from (select b as bbb, a + 1 as x from (select * from t order by b) t) t group by bbb",
        "Best": "BlockReader(Block(t))->Sort->Projection->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(a), avg(b + c) from t group by d",
        "Best": "BlockReader(Block(t)->HashAgg)->HashAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(distinct a), avg(b + c) from t group by d",
        "Best": "BlockReader(Block(t))->Projection->HashAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(e), avg(e + c) from t where c = 1 group by (c + d)",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]]->HashAgg)->HashAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(e), avg(e + c) from t where c = 1 group by c",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]]->StreamAgg)->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(e), avg(e + c) from t where c = 1 group by e",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]]->HashAgg)->HashAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(e), avg(b + c) from t where c = 1 and e = 1 group by d",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]]->Sel([eq(test.t.e, 1)]), Block(t))->Projection->HashAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(e), avg(b + c) from t where c = 1 and b = 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]], Block(t)->Sel([eq(test.t.b, 1)]))->Projection->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(e) as k, avg(b + c) from t where c = 1 and b = 1 and e = 1 group by d order by k",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]]->Sel([eq(test.t.e, 1)]), Block(t)->Sel([eq(test.t.b, 1)]))->Projection->Projection->StreamAgg->Sort"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(e) as k, avg(b + c) from t where c = 1 and b = 1 and e = 1 group by c order by k",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,1]]->Sel([eq(test.t.e, 1)]), Block(t)->Sel([eq(test.t.b, 1)]))->Projection->Projection->StreamAgg->Sort"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(to_base64(e)) from t where c = 1",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]])->Projection->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select (select count(1) k from t s where s.a = t.a having k != 0) from t",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.f)[[NULL,+inf]]->Sel([1]))->Projection}(test.t.a,test.t.a)->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(to_base64(e)) from t group by e,d,c order by c",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]])->Projection->StreamAgg->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(e+1) from t group by e,d,c order by c",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]]->StreamAgg)->StreamAgg->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(to_base64(e)) from t group by e,d,c order by c,e",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]])->Projection->StreamAgg->Sort->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(e+1) from t group by e,d,c order by c,e",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]]->StreamAgg)->StreamAgg->Sort->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select count(*) from t group by g order by g limit 10",
        "Best": "IndexReader(Index(t.g)[[NULL,+inf]]->StreamAgg)->StreamAgg->Limit->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select count(*) from t group by g limit 10",
        "Best": "IndexReader(Index(t.g)[[NULL,+inf]]->StreamAgg)->StreamAgg->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select count(*) from t group by g order by g",
        "Best": "IndexReader(Index(t.g)[[NULL,+inf]]->StreamAgg)->StreamAgg->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select count(*) from t group by g order by g desc limit 1",
        "Best": "IndexReader(Index(t.g)[[NULL,+inf]]->StreamAgg)->StreamAgg->Limit->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select count(*) from t group by b order by b limit 10",
        "Best": "BlockReader(Block(t)->HashAgg)->HashAgg->TopN([test.t.b],0,10)->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select count(*) from t group by b order by b",
        "Best": "BlockReader(Block(t)->HashAgg)->HashAgg->Sort->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select count(*) from t group by b limit 10",
        "Best": "BlockReader(Block(t)->HashAgg)->HashAgg->Limit"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(a.g), sum(b.g) from t a join t b on a.g = b.g group by a.g",
        "Best": "MergeInnerJoin{IndexReader(Index(t.g)[[NULL,+inf]])->IndexReader(Index(t.g)[[NULL,+inf]])}(test.t.g,test.t.g)->Projection->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ milevadb_inlj(a,b) */ sum(a.g), sum(b.g) from t a join t b on a.g = b.g and a.g > 60 group by a.g order by a.g limit 1",
        "Best": "IndexJoin{IndexReader(Index(t.g)[(60,+inf]])->IndexReader(Index(t.g)[[NULL,+inf]]->Sel([gt(test.t.g, 60)]))}(test.t.g,test.t.g)->Projection->StreamAgg->Limit->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(a.g), sum(b.g) from t a join t b on a.g = b.g and a.a>5 group by a.g order by a.g limit 1",
        "Best": "MergeInnerJoin{IndexReader(Index(t.g)[[NULL,+inf]]->Sel([gt(test.t.a, 5)]))->IndexReader(Index(t.g)[[NULL,+inf]])}(test.t.g,test.t.g)->Projection->StreamAgg->Limit->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select sum(d) from t",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]]->StreamAgg)->StreamAgg"
      }
    ]
  },
  {
    "Name": "TestRefine",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select a from t where c is not null",
        "Best": "IndexReader(Index(t.c_d_e)[[-inf,+inf]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c >= 4",
        "Best": "IndexReader(Index(t.c_d_e)[[4,+inf]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c <= 4",
        "Best": "IndexReader(Index(t.c_d_e)[[-inf,4]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c = 4 and d = 5 and e = 6",
        "Best": "PointGet(Index(t.c_d_e)[HoTTInt64 4 HoTTInt64 5 HoTTInt64 6])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where d = 4 and c = 5",
        "Best": "IndexReader(Index(t.c_d_e)[[5 4,5 4]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c = 4 and e < 5",
        "Best": "IndexReader(Index(t.c_d_e)[[4,4]]->Sel([lt(test.t.e, 5)]))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c = 4 and d <= 5 and d > 3",
        "Best": "IndexReader(Index(t.c_d_e)[(4 3,4 5]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where d <= 5 and d > 3",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]]->Sel([le(test.t.d, 5) gt(test.t.d, 3)]))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c between 1 and 2",
        "Best": "IndexReader(Index(t.c_d_e)[[1,2]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c not between 1 and 2",
        "Best": "IndexReader(Index(t.c_d_e)[[-inf,1) (2,+inf]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c <= 5 and c >= 3 and d = 1",
        "Best": "IndexReader(Index(t.c_d_e)[[3,5]]->Sel([eq(test.t.d, 1)]))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c = 1 or c = 2 or c = 3",
        "Best": "IndexReader(Index(t.c_d_e)[[1,3]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select b from t where c = 1 or c = 2 or c = 3 or c = 4 or c = 5",
        "Best": "IndexLookUp(Index(t.c_d_e)[[1,5]], Block(t))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c = 5",
        "Best": "IndexReader(Index(t.c_d_e)[[5,5]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c = 5 and b = 1",
        "Best": "IndexLookUp(Index(t.c_d_e)[[5,5]], Block(t)->Sel([eq(test.t.b, 1)]))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where not a",
        "Best": "PointGet(Handle(t.a)0)"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c in (1)",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c in ('1')",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c = 1.0",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c in (1) and d > 3",
        "Best": "IndexReader(Index(t.c_d_e)[(1 3,1 +inf]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c in (1, 2, 3) and (d > 3 and d < 4 or d > 5 and d < 6)",
        "Best": "Dual->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c in (1, 2, 3) and (d > 2 and d < 4 or d > 5 and d < 7)",
        "Best": "IndexReader(Index(t.c_d_e)[(1 2,1 4) (1 5,1 7) (2 2,2 4) (2 5,2 7) (3 2,3 4) (3 5,3 7)])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c in (1, 2, 3)",
        "Best": "IndexReader(Index(t.c_d_e)[[1,1] [2,2] [3,3]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c in (1, 2, 3) and d in (1,2) and e = 1",
        "Best": "BatchPointGet(Index(t.c_d_e)[[HoTTInt64 1 HoTTInt64 1 HoTTInt64 1] [HoTTInt64 1 HoTTInt64 2 HoTTInt64 1] [HoTTInt64 2 HoTTInt64 1 HoTTInt64 1] [HoTTInt64 2 HoTTInt64 2 HoTTInt64 1] [HoTTInt64 3 HoTTInt64 1 HoTTInt64 1] [HoTTInt64 3 HoTTInt64 2 HoTTInt64 1]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where d in (1, 2, 3)",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]]->Sel([in(test.t.d, 1, 2, 3)]))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c not in (1)",
        "Best": "IndexReader(Index(t.c_d_e)[[-inf,1) (1,+inf]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t use index(c_d_e) where c != 1",
        "Best": "IndexReader(Index(t.c_d_e)[[-inf,1) (1,+inf]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like ''",
        "Best": "IndexReader(Index(t.c_d_e_str)[[\"\",\"\"]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 'abc'",
        "Best": "IndexReader(Index(t.c_d_e_str)[[\"abc\",\"abc\"]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str not like 'abc'",
        "Best": "IndexReader(Index(t.c_d_e_str)[[-inf,\"abc\") (\"abc\",+inf]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where not (c_str like 'abc' or c_str like 'abd')",
        "Best": "IndexReader(Index(t.c_d_e_str)[[-inf,\"abc\") (\"abc\",\"abd\") (\"abd\",+inf]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like '_abc'",
        "Best": "IndexReader(Index(t.c_d_e_str)[[NULL,+inf]]->Sel([like(test.t.c_str, _abc, 92)]))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 'abc%'",
        "Best": "IndexReader(Index(t.c_d_e_str)[[\"abc\",\"abd\")])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 'abc_'",
        "Best": "IndexReader(Index(t.c_d_e_str)[(\"abc\",\"abd\")]->Sel([like(test.t.c_str, abc_, 92)]))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 'abc%af'",
        "Best": "IndexReader(Index(t.c_d_e_str)[[\"abc\",\"abd\")]->Sel([like(test.t.c_str, abc%af, 92)]))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 'abc\\_' escape ''",
        "Best": "IndexReader(Index(t.c_d_e_str)[[\"abc_\",\"abc_\"]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 'abc\\_'",
        "Best": "IndexReader(Index(t.c_d_e_str)[[\"abc_\",\"abc_\"]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 'abc\\\\_'",
        "Best": "IndexReader(Index(t.c_d_e_str)[[\"abc_\",\"abc_\"]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 'abc\\_%'",
        "Best": "IndexReader(Index(t.c_d_e_str)[[\"abc_\",\"abc`\")])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 'abc=_%' escape '='",
        "Best": "IndexReader(Index(t.c_d_e_str)[[\"abc_\",\"abc`\")])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 'abc\\__'",
        "Best": "IndexReader(Index(t.c_d_e_str)[(\"abc_\",\"abc`\")]->Sel([like(test.t.c_str, abc\\__, 92)]))->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c_str like 123",
        "Best": "IndexReader(Index(t.c_d_e_str)[[\"123\",\"123\"]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c = 1.9 and d > 3",
        "Best": "Dual"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c < 1.1",
        "Best": "IndexReader(Index(t.c_d_e)[[-inf,2)])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c <= 1.9",
        "Best": "IndexReader(Index(t.c_d_e)[[-inf,1]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c >= 1.1",
        "Best": "IndexReader(Index(t.c_d_e)[[2,+inf]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c > 1.9",
        "Best": "IndexReader(Index(t.c_d_e)[(1,+inf]])->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c = 123456789098765432101234",
        "Best": "Dual"
      },
      {
        "ALLEGROALLEGROSQL": "select a from t where c = 'hanfei'",
        "Best": "IndexReader(Index(t.c_d_e)[[NULL,+inf]]->Sel([eq(cast(test.t.c, double BINARY), cast(hanfei, double BINARY))]))->Projection"
      }
    ]
  },
  {
    "Name": "TestAggEliminator",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select max(a) from t;",
        "Best": "BlockReader(Block(t)->Limit)->Limit->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select min(a) from t;",
        "Best": "BlockReader(Block(t)->Limit)->Limit->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select min(c_str) from t;",
        "Best": "IndexReader(Index(t.c_d_e_str)[[-inf,+inf]]->Limit)->Limit->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select max(a), b from t;",
        "Best": "BlockReader(Block(t)->StreamAgg)->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select max(a+1) from t;",
        "Best": "IndexReader(Index(t.f)[[NULL,+inf]]->Sel([not(isnull(plus(test.t.a, 1)))])->TopN([plus(test.t.a, 1) true],0,1))->Projection->TopN([DeferredCauset#40 true],0,1)->Projection->Projection->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select max(a), min(a) from t;",
        "Best": "LeftHashJoin{BlockReader(Block(t)->Limit)->Limit->StreamAgg->BlockReader(Block(t)->Limit)->Limit->StreamAgg}"
      },
      {
        "ALLEGROALLEGROSQL": "select max(a), min(a) from t where a > 10",
        "Best": "LeftHashJoin{BlockReader(Block(t)->Limit)->Limit->StreamAgg->BlockReader(Block(t)->Limit)->Limit->StreamAgg}"
      },
      {
        "ALLEGROALLEGROSQL": "select max(d), min(d) from t where c = 1 and d > 10",
        "Best": "LeftHashJoin{IndexReader(Index(t.c_d_e)[(1 10,1 +inf]]->Limit)->Limit->StreamAgg->IndexReader(Index(t.c_d_e)[(1 10,1 +inf]]->Limit)->Limit->StreamAgg}"
      },
      {
        "ALLEGROALLEGROSQL": "select max(a), max(c), min(f) from t",
        "Best": "LeftHashJoin{LeftHashJoin{BlockReader(Block(t)->Limit)->Limit->StreamAgg->IndexReader(Index(t.c_d_e)[[NULL,+inf]]->Limit)->Limit->StreamAgg}->IndexReader(Index(t.f)[[NULL,+inf]]->Limit)->Limit->StreamAgg}"
      },
      {
        "ALLEGROALLEGROSQL": "select max(a), max(b) from t",
        "Best": "BlockReader(Block(t)->StreamAgg)->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select max(a), max(c) from t where c > 10",
        "Best": "IndexReader(Index(t.c_d_e)[(10,+inf]]->StreamAgg)->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select max(a), min(a) from t where a * 3 + 10 < 100",
        "Best": "IndexReader(Index(t.f)[[NULL,+inf]]->Sel([lt(plus(mul(test.t.a, 3), 10), 100)])->StreamAgg)->StreamAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select max(a) from t group by b;",
        "Best": "BlockReader(Block(t)->HashAgg)->HashAgg"
      },
      {
        "ALLEGROALLEGROSQL": "select max(a) from (select t1.a from t t1 join t t2 on t1.a=t2.a) t",
        "Best": "MergeInnerJoin{BlockReader(Block(t))->BlockReader(Block(t))}(test.t.a,test.t.a)->Limit->StreamAgg"
      }
    ]
  },
  {
    "Name": "TestUnmatchedBlockInHint",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "SELECT /*+ MilevaDB_SMJ(t3, t4) */ * from t t1, t t2 where t1.a = t2.a",
        "Warning": "[planner:1815]There are no matching block names for (t3, t4) in optimizer hint /*+ MERGE_JOIN(t3, t4) */ or /*+ MilevaDB_SMJ(t3, t4) */. Maybe you can use the block alias name"
      },
      {
        "ALLEGROALLEGROSQL": "SELECT /*+ MilevaDB_HJ(t3, t4) */ * from t t1, t t2 where t1.a = t2.a",
        "Warning": "[planner:1815]There are no matching block names for (t3, t4) in optimizer hint /*+ HASH_JOIN(t3, t4) */ or /*+ MilevaDB_HJ(t3, t4) */. Maybe you can use the block alias name"
      },
      {
        "ALLEGROALLEGROSQL": "SELECT /*+ MilevaDB_INLJ(t3, t4) */ * from t t1, t t2 where t1.a = t2.a",
        "Warning": "[planner:1815]There are no matching block names for (t3, t4) in optimizer hint /*+ INL_JOIN(t3, t4) */ or /*+ MilevaDB_INLJ(t3, t4) */. Maybe you can use the block alias name"
      },
      {
        "ALLEGROALLEGROSQL": "SELECT /*+ MilevaDB_SMJ(t1, t2) */ * from t t1, t t2 where t1.a = t2.a",
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "SELECT /*+ MilevaDB_SMJ(t3, t4) */ * from t t1, t t2, t t3 where t1.a = t2.a and t2.a = t3.a",
        "Warning": "[planner:1815]There are no matching block names for (t4) in optimizer hint /*+ MERGE_JOIN(t3, t4) */ or /*+ MilevaDB_SMJ(t3, t4) */. Maybe you can use the block alias name"
      }
    ]
  },
  {
    "Name": "TestJoinHints",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t1) */ t1.a, t2.a, t3.a from t t1, t t2, t t3 where t1.a = t2.a and t2.a = t3.a;",
        "Best": "RightHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexJoin{BlockReader(Block(t))->IndexReader(Index(t.f)[[NULL,+inf]])}(test.t.a,test.t.a)}(test.t.a,test.t.a)->Projection",
        "Warning": "",
        "Hints": "use_index(@`sel_1` `test`.`t3` `f`), use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_1` `test`.`t2` `f`), inl_join(@`sel_1` `test`.`t1`), hash_join(@`sel_1` `test`.`t3`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(test.t1) */ t1.a, t2.a, t3.a from t t1, t t2, t t3 where t1.a = t2.a and t2.a = t3.a;",
        "Best": "RightHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexJoin{BlockReader(Block(t))->IndexReader(Index(t.f)[[NULL,+inf]])}(test.t.a,test.t.a)}(test.t.a,test.t.a)->Projection",
        "Warning": "",
        "Hints": "use_index(@`sel_1` `test`.`t3` `f`), use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_1` `test`.`t2` `f`), inl_join(@`sel_1` `test`.`t1`), hash_join(@`sel_1` `test`.`t3`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t1) */ t1.b, t2.a from t t1, t t2 where t1.b = t2.a;",
        "Best": "LeftHashJoin{BlockReader(Block(t))->IndexReader(Index(t.f)[[NULL,+inf]])}(test.t.b,test.t.a)",
        "Warning": "[planner:1815]Optimizer Hint /*+ INL_JOIN(t1) */ or /*+ MilevaDB_INLJ(t1) */ is inapplicable",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_1` `test`.`t2` `f`), hash_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_INLJ(t2) */ t1.b, t2.a from t2 t1, t2 t2 where t1.b=t2.b and t2.c=-1;",
        "Best": "IndexJoin{IndexReader(Index(t2.b)[[NULL,+inf]])->BlockReader(Block(t2)->Sel([eq(test.t2.c, -1)]))}(test.t2.b,test.t2.b)",
        "Warning": "[planner:1815]Optimizer Hint /*+ INL_JOIN(t2) */ or /*+ MilevaDB_INLJ(t2) */ is inapplicable",
        "Hints": "use_index(@`sel_1` `test`.`t1` `b`), use_index(@`sel_1` `test`.`t2` ), inl_join(@`sel_1` `test`.`t1`)"
      }
    ]
  },
  {
    "Name": "TestAggregationHints",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select count(*) from t t1, t t2 where t1.a = t2.b",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->BlockReader(Block(t))}(test.t.a,test.t.b)->StreamAgg",
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select count(t1.a) from t t1, t t2 where t1.a = t2.a*2 group by t1.a",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.f)[[NULL,+inf]])->Projection}(test.t.a,DeferredCauset#26)->HashAgg",
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ count(*) from t t1, t t2 where t1.a = t2.b",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->BlockReader(Block(t))}(test.t.a,test.t.b)->HashAgg",
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG() */ count(t1.a) from t t1, t t2 where t1.a = t2.a*2 group by t1.a",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.f)[[NULL,+inf]])->Projection}(test.t.a,DeferredCauset#26)->Sort->StreamAgg",
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() STREAM_AGG() */ count(*) from t t1, t t2 where t1.a = t2.b",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->BlockReader(Block(t))}(test.t.a,test.t.b)->StreamAgg",
        "Warning": "[planner:1815]Optimizer aggregation hints are conflicted"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG() */ distinct a from t",
        "Best": "IndexReader(Index(t.f)[[NULL,+inf]])",
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ t1.a from t t1 where t1.a < any(select t2.b from t t2)",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]]->Sel([if(isnull(test.t.a), <nil>, 1)]))->BlockReader(Block(t)->HashAgg)->HashAgg->Sel([ne(DeferredCauset#27, 0)])}",
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ hash_agg() */ t1.a from t t1 where t1.a != any(select t2.b from t t2)",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]]->Sel([if(isnull(test.t.a), <nil>, 1)]))->BlockReader(Block(t))->Projection->HashAgg->Sel([ne(DeferredCauset#28, 0)])}",
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ hash_agg() */ t1.a from t t1 where t1.a = all(select t2.b from t t2)",
        "Best": "LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->BlockReader(Block(t))->Projection->HashAgg}",
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG() */ sum(t1.a) from t t1 join t t2 on t1.b = t2.b group by t1.b",
        "Best": "LeftHashJoin{BlockReader(Block(t))->BlockReader(Block(t))->Sort->Projection->StreamAgg}(test.t.b,test.t.b)->HashAgg",
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG() */ e, sum(b) from t group by e",
        "Best": "BlockReader(Block(t))->Sort->Projection->StreamAgg->Projection",
        "Warning": ""
      }
    ]
  },
  {
    "Name": "TestQueryBlockHint",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ MERGE_JOIN(@sel_1 t1), INL_JOIN(@sel_2 t3) */ t1.a, t1.b from t t1, (select t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Plan": "MergeInnerJoin{BlockReader(Block(t))->IndexJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_2` `test`.`t2` ), use_index(@`sel_2` `test`.`t3` `c_d_e`), inl_join(@`sel_2` `test`.`t3`), merge_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MERGE_JOIN(@sel_1 t1), INL_JOIN(@qb t3) */ t1.a, t1.b from t t1, (select /*+ QB_NAME(qb) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Plan": "MergeInnerJoin{BlockReader(Block(t))->IndexJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_2` `test`.`t2` ), use_index(@`sel_2` `test`.`t3` `c_d_e`), inl_join(@`sel_2` `test`.`t3`), merge_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(@sel_1 t1), MERGE_JOIN(@sel_2 t2) */ t1.a, t1.b from t t1, (select t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Plan": "RightHashJoin{BlockReader(Block(t))->MergeInnerJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_2` `test`.`t2` ), use_index(@`sel_2` `test`.`t3` `c_d_e`), merge_join(@`sel_2` `test`.`t2`), hash_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(@sel_1 t1), MERGE_JOIN(@qb t2) */ t1.a, t1.b from t t1, (select /*+ QB_NAME(qb) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Plan": "RightHashJoin{BlockReader(Block(t))->MergeInnerJoin{BlockReader(Block(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_2` `test`.`t2` ), use_index(@`sel_2` `test`.`t3` `c_d_e`), merge_join(@`sel_2` `test`.`t2`), hash_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_JOIN(@sel_1 t1), HASH_JOIN(@sel_2 t2) */ t1.a, t1.b from t t1, (select t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Plan": "IndexJoin{BlockReader(Block(t))->LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_2` `test`.`t2` `f`), use_index(@`sel_2` `test`.`t3` `c_d_e`), hash_join(@`sel_2` `test`.`t2`), inl_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_JOIN(@sel_1 t1), HASH_JOIN(@qb t2) */ t1.a, t1.b from t t1, (select /*+ QB_NAME(qb) */ t2.a from t t2, t t3 where t2.a = t3.c) s where t1.a=s.a",
        "Plan": "IndexJoin{BlockReader(Block(t))->LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.c_d_e)[[NULL,+inf]])}(test.t.a,test.t.c)}(test.t.a,test.t.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_2` `test`.`t2` `f`), use_index(@`sel_2` `test`.`t3` `c_d_e`), hash_join(@`sel_2` `test`.`t2`), inl_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(@sel_1), STREAM_AGG(@sel_2) */ count(*) from t t1 where t1.a < (select count(*) from t t2 where t1.a > t2.a)",
        "Plan": "Apply{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.f)[[NULL,+inf]]->Sel([gt(test.t.a, test.t.a)])->StreamAgg)->StreamAgg}->HashAgg",
        "Hints": "use_index(@`sel_1` `test`.`t1` `f`), use_index(@`sel_2` `test`.`t2` `f`), stream_agg(@`sel_2`), hash_agg(@`sel_1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG(@sel_1), HASH_AGG(@qb) */ count(*) from t t1 where t1.a < (select /*+ QB_NAME(qb) */ count(*) from t t2 where t1.a > t2.a)",
        "Plan": "Apply{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.f)[[NULL,+inf]]->Sel([gt(test.t.a, test.t.a)])->HashAgg)->HashAgg}->StreamAgg",
        "Hints": "use_index(@`sel_1` `test`.`t1` `f`), use_index(@`sel_2` `test`.`t2` `f`), hash_agg(@`sel_2`), stream_agg(@`sel_1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(@sel_2) */ a, (select count(*) from t t1 where t1.b > t.a) from t where b > (select b from t t2 where t2.b = t.a limit 1)",
        "Plan": "Apply{Apply{BlockReader(Block(t))->BlockReader(Block(t)->Sel([eq(test.t.b, test.t.a)])->Limit)->Limit}->BlockReader(Block(t)->Sel([gt(test.t.b, test.t.a)])->HashAgg)->HashAgg}->Projection",
        "Hints": "use_index(@`sel_1` `test`.`t` ), use_index(@`sel_3` `test`.`t2` ), use_index(@`sel_2` `test`.`t1` ), hash_agg(@`sel_2`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(@sel_1 t1), HASH_JOIN(@sel_2 t1) */ t1.b, t2.a, t2.aa from t t1, (select t1.a as a, t2.a as aa from t t1, t t2) t2 where t1.a = t2.aa;",
        "Plan": "RightHashJoin{BlockReader(Block(t))->LeftHashJoin{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.f)[[NULL,+inf]])}}(test.t.a,test.t.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_2` `test`.`t1` `f`), use_index(@`sel_2` `test`.`t2` `f`), hash_join(@`sel_2` `test`.`t1`), hash_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(@sel_2 t1@sel_2, t2@sel_2), MERGE_JOIN(@sel_1 t1@sel_1, t2@sel_1) */ * from (select t1.a, t1.b from t t1, t t2 where t1.a = t2.a) t1, t t2 where t1.b = t2.b",
        "Plan": "MergeInnerJoin{LeftHashJoin{BlockReader(Block(t))->IndexReader(Index(t.f)[[NULL,+inf]])}(test.t.a,test.t.a)->Sort->BlockReader(Block(t))->Sort}(test.t.b,test.t.b)",
        "Hints": "use_index(@`sel_2` `test`.`t1` ), use_index(@`sel_2` `test`.`t2` `f`), hash_join(@`sel_2` `test`.`t1`), use_index(@`sel_1` `test`.`t2` ), merge_join(@`sel_1` `test`.`t1`)"
      }
    ]
  },
  {
    "Name": "TestIndexJoinUnionScan",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": [
          "insert into t values(1, 1)",
          "explain select /*+ MilevaDB_INLJ(t2) */ * from t t1, t t2 where t1.a = t2.a"
        ],
        "Plan": [
          "IndexJoin_12 12500.00 root  inner join, inner:UnionScan_11, outer key:test.t.a, inner key:test.t.a",
          "├─UnionScan_15(Build) 10000.00 root  ",
          "│ └─BlockReader_17 10000.00 root  data:BlockFullScan_16",
          "│   └─BlockFullScan_16 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo",
          "└─UnionScan_11(Probe) 1.00 root  ",
          "  └─BlockReader_10 1.00 root  data:BlockRangeScan_9",
          "    └─BlockRangeScan_9 1.00 INTERLOCK[einsteindb] block:t2 range: decided by [test.t.a], keep order:false, stats:pseudo"
        ]
      },
      {
        "ALLEGROALLEGROSQL": [
          "insert into t values(1, 1)",
          "explain select /*+ MilevaDB_INLJ(t2) */ * from t t1, t t2 where t1.a = t2.b"
        ],
        "Plan": [
          "HashJoin_15 12487.50 root  inner join, equal:[eq(test.t.a, test.t.b)]",
          "├─UnionScan_17(Build) 9990.00 root  not(isnull(test.t.b))",
          "│ └─BlockReader_20 9990.00 root  data:Selection_19",
          "│   └─Selection_19 9990.00 INTERLOCK[einsteindb]  not(isnull(test.t.b))",
          "│     └─BlockFullScan_18 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo",
          "└─UnionScan_21(Probe) 10000.00 root  ",
          "  └─BlockReader_23 10000.00 root  data:BlockFullScan_22",
          "    └─BlockFullScan_22 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "ALLEGROALLEGROSQL": [
          "insert into t values(1, 1)",
          "explain select /*+ MilevaDB_INLJ(t2) */ t1.a , t2.b from t t1, t t2 where t1.a = t2.b"
        ],
        "Plan": [
          "HashJoin_15 12487.50 root  inner join, equal:[eq(test.t.a, test.t.b)]",
          "├─UnionScan_17(Build) 9990.00 root  not(isnull(test.t.b))",
          "│ └─BlockReader_20 9990.00 root  data:Selection_19",
          "│   └─Selection_19 9990.00 INTERLOCK[einsteindb]  not(isnull(test.t.b))",
          "│     └─BlockFullScan_18 10000.00 INTERLOCK[einsteindb] block:t2 keep order:false, stats:pseudo",
          "└─UnionScan_21(Probe) 10000.00 root  ",
          "  └─BlockReader_23 10000.00 root  data:BlockFullScan_22",
          "    └─BlockFullScan_22 10000.00 INTERLOCK[einsteindb] block:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "ALLEGROALLEGROSQL": [
          "insert into tt values(1)",
          "explain select /*+ MilevaDB_INLJ(t2) */ * from tt t1, tt t2 where t1.a = t2.a"
        ],
        "Plan": [
          "HashJoin_19 25000.00 root  inner join, equal:[eq(test.tt.a, test.tt.a)]",
          "├─PartitionUnion_28(Build) 20000.00 root  ",
          "│ ├─UnionScan_29 10000.00 root  ",
          "│ │ └─BlockReader_31 10000.00 root  data:BlockFullScan_30",
          "│ │   └─BlockFullScan_30 10000.00 INTERLOCK[einsteindb] block:t2, partition:p0 keep order:false, stats:pseudo",
          "│ └─UnionScan_32 10000.00 root  ",
          "│   └─BlockReader_34 10000.00 root  data:BlockFullScan_33",
          "│     └─BlockFullScan_33 10000.00 INTERLOCK[einsteindb] block:t2, partition:p1 keep order:false, stats:pseudo",
          "└─PartitionUnion_21(Probe) 20000.00 root  ",
          "  ├─UnionScan_22 10000.00 root  ",
          "  │ └─BlockReader_24 10000.00 root  data:BlockFullScan_23",
          "  │   └─BlockFullScan_23 10000.00 INTERLOCK[einsteindb] block:t1, partition:p0 keep order:false, stats:pseudo",
          "  └─UnionScan_25 10000.00 root  ",
          "    └─BlockReader_27 10000.00 root  data:BlockFullScan_26",
          "      └─BlockFullScan_26 10000.00 INTERLOCK[einsteindb] block:t1, partition:p1 keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestSemiJoinToInner",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select t1.a, (select count(t2.a) from t t2 where t2.g in (select t3.d from t t3 where t3.c = t1.a)) as agg_col from t t1;",
        "Best": "Apply{IndexReader(Index(t.f)[[NULL,+inf]])->IndexMergeJoin{IndexReader(Index(t.c_d_e)[[NULL,+inf]]->HashAgg)->HashAgg->IndexReader(Index(t.g)[[NULL,+inf]])}(test.t.d,test.t.g)}->HashAgg"
      }
    ]
  },
  {
    "Name": "TestIndexJoinHint",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_JOIN(t1) */ * from t1 join t2 on t1.a = t2.a;",
        "Plan": "IndexJoin{IndexLookUp(Index(t1.idx_a)[[NULL,+inf]]->Sel([not(isnull(test.t1.a))]), Block(t1))->BlockReader(Block(t2)->Sel([not(isnull(test.t2.a))]))}(test.t2.a,test.t1.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_HASH_JOIN(t1) */ * from t1 join t2 on t1.a = t2.a;",
        "Plan": "IndexHashJoin{IndexLookUp(Index(t1.idx_a)[[NULL,+inf]]->Sel([not(isnull(test.t1.a))]), Block(t1))->BlockReader(Block(t2)->Sel([not(isnull(test.t2.a))]))}(test.t2.a,test.t1.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_MERGE_JOIN(t1) */ * from t1 join t2 on t1.a = t2.a;",
        "Plan": "IndexMergeJoin{IndexLookUp(Index(t1.idx_a)[[NULL,+inf]]->Sel([not(isnull(test.t1.a))]), Block(t1))->Projection->BlockReader(Block(t2)->Sel([not(isnull(test.t2.a))]))}(test.t2.a,test.t1.a)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ inl_merge_join(t2) */ t1.a, t2.a from t t1 left join t t2 use index(g_2) on t1.g=t2.g",
        "Plan": "IndexMergeJoin{IndexReader(Index(t.g_3)[[NULL,+inf]])->IndexReader(Index(t.g_2)[[NULL,+inf]]->Sel([not(isnull(test.t.g))]))}(test.t.g,test.t.g)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+inl_merge_join(t2)*/ t1.a, t2.a from t t1 left join t t2 use index(g_2) on t1.g=t2.g order by t1.a",
        "Plan": "IndexMergeJoin{IndexReader(Index(t.g_3)[[NULL,+inf]])->IndexReader(Index(t.g_2)[[NULL,+inf]]->Sel([not(isnull(test.t.g))]))}(test.t.g,test.t.g)->Sort"
      }
    ]
  },
  {
    "Name": "TestAggToINTERLOCKHint",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ AGG_TO_INTERLOCK(), HASH_AGG(), USE_INDEX(t) */ sum(a) from ta group by a",
        "Best": "IndexReader(Index(ta.a)[[NULL,+inf]]->HashAgg)->HashAgg",
        "Warning": "[planner:1815]use_index(test.t) is inapplicable, check whether the block(test.t) exists"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ AGG_TO_INTERLOCK(), USE_INDEX(t) */ sum(b) from ta group by b",
        "Best": "BlockReader(Block(ta)->HashAgg)->HashAgg",
        "Warning": "[planner:1815]use_index(test.t) is inapplicable, check whether the block(test.t) exists"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ AGG_TO_INTERLOCK(), HASH_AGG(), USE_INDEX(t) */ distinct a from ta group by a",
        "Best": "IndexReader(Index(ta.a)[[NULL,+inf]]->HashAgg)->HashAgg",
        "Warning": "[planner:1815]use_index(test.t) is inapplicable, check whether the block(test.t) exists"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ AGG_TO_INTERLOCK(), HASH_AGG(), HASH_JOIN(t1), USE_INDEX(t1), USE_INDEX(t2) */ sum(t1.a) from ta t1, ta t2 where t1.a = t2.b group by t1.a",
        "Best": "LeftHashJoin{BlockReader(Block(ta)->Sel([not(isnull(test.ta.a))]))->BlockReader(Block(ta)->Sel([not(isnull(test.ta.b))]))}(test.ta.a,test.ta.b)->Projection->HashAgg",
        "Warning": "[planner:1815]Optimizer Hint AGG_TO_INTERLOCK is inapplicable"
      }
    ]
  },
  {
    "Name": "TestLimitToINTERLOCKHint",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ LIMIT_TO_INTERLOCK() */ * from tn where a = 1 and b > 10 and b < 20 and c > 50 order by d limit 1",
        "Plan": [
          "TopN_8 0.83 root  test.tn.d, offset:0, count:1",
          "└─IndexReader_15 0.83 root  index:TopN_14",
          "  └─TopN_14 0.83 INTERLOCK[einsteindb]  test.tn.d, offset:0, count:1",
          "    └─Selection_13 0.83 INTERLOCK[einsteindb]  gt(test.tn.c, 50)",
          "      └─IndexRangeScan_12 2.50 INTERLOCK[einsteindb] block:tn, index:a(a, b, c, d) range:(1 10,1 20), keep order:false, stats:pseudo"
        ],
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select * from tn where a = 1 and b > 10 and b < 20 and c > 50 order by d limit 1",
        "Plan": [
          "TopN_10 0.83 root  test.tn.d, offset:0, count:1",
          "└─IndexReader_20 0.83 root  index:Selection_19",
          "  └─Selection_19 0.83 INTERLOCK[einsteindb]  gt(test.tn.c, 50)",
          "    └─IndexRangeScan_18 2.50 INTERLOCK[einsteindb] block:tn, index:a(a, b, c, d) range:(1 10,1 20), keep order:false, stats:pseudo"
        ],
        "Warning": ""
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ LIMIT_TO_INTERLOCK() */ a from tn where mod(a, 2) order by a limit 1",
        "Plan": [
          "Limit_13 1.00 root  offset:0, count:1",
          "└─Selection_19 1.00 root  mod(test.tn.a, 2)",
          "  └─IndexReader_21 1.00 root  index:IndexFullScan_20",
          "    └─IndexFullScan_20 1.00 INTERLOCK[einsteindb] block:tn, index:a(a, b, c, d) keep order:true, stats:pseudo"
        ],
        "Warning": "[planner:1815]Optimizer Hint LIMIT_TO_INTERLOCK is inapplicable"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ LIMIT_TO_INTERLOCK() */ a from tn where a > 10 limit 1",
        "Plan": [
          "Limit_8 1.00 root  offset:0, count:1",
          "└─IndexReader_12 1.00 root  index:Limit_11",
          "  └─Limit_11 1.00 INTERLOCK[einsteindb]  offset:0, count:1",
          "    └─IndexRangeScan_10 1.00 INTERLOCK[einsteindb] block:tn, index:a(a, b, c, d) range:(10,+inf], keep order:false, stats:pseudo"
        ],
        "Warning": ""
      }
    ]
  },
  {
    "Name": "TestPushdownDistinctEnable",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ avg(distinct a) from t;",
        "Plan": [
          "HashAgg_8 1.00 root  funcs:avg(distinct DeferredCauset#6)->DeferredCauset#5",
          "└─Projection_10 1.00 root  cast(test.t.a, decimal(65,4) BINARY)->DeferredCauset#6",
          "  └─BlockReader_9 1.00 root  data:HashAgg_5",
          "    └─HashAgg_5 1.00 INTERLOCK[einsteindb]  group by:test.t.a, ",
          "      └─BlockFullScan_7 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.5000"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ a, count(distinct a) from t;",
        "Plan": [
          "Projection_4 1.00 root  test.t.a, DeferredCauset#5",
          "└─HashAgg_8 1.00 root  funcs:count(distinct test.t.a)->DeferredCauset#5, funcs:firstrow(DeferredCauset#6)->test.t.a",
          "  └─BlockReader_9 1.00 root  data:HashAgg_5",
          "    └─HashAgg_5 1.00 INTERLOCK[einsteindb]  group by:test.t.a, funcs:firstrow(test.t.a)->DeferredCauset#6",
          "      └─BlockFullScan_7 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;",
        "Plan": [
          "Projection_4 8000.00 root  DeferredCauset#5, test.t.c, DeferredCauset#5, DeferredCauset#6, DeferredCauset#7, DeferredCauset#8, DeferredCauset#9",
          "└─HashAgg_8 8000.00 root  group by:test.t.c, funcs:avg(DeferredCauset#10, DeferredCauset#11)->DeferredCauset#5, funcs:count(distinct test.t.a, test.t.b)->DeferredCauset#6, funcs:count(distinct test.t.a)->DeferredCauset#7, funcs:count(distinct test.t.c)->DeferredCauset#8, funcs:sum(DeferredCauset#12)->DeferredCauset#9, funcs:firstrow(test.t.c)->test.t.c",
          "  └─BlockReader_9 8000.00 root  data:HashAgg_5",
          "    └─HashAgg_5 8000.00 INTERLOCK[einsteindb]  group by:test.t.a, test.t.b, test.t.c, funcs:count(test.t.b)->DeferredCauset#10, funcs:sum(test.t.b)->DeferredCauset#11, funcs:sum(test.t.b)->DeferredCauset#12",
          "      └─BlockFullScan_7 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.0000 1 1.0000 1 1 1 1",
          "1.3333 3 1.3333 3 2 1 4",
          "2.0000 <nil> 2.0000 1 1 0 2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG() */ count(distinct c) from t group by c;",
        "Plan": [
          "StreamAgg_11 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_12 8000.00 root  index:StreamAgg_7",
          "  └─StreamAgg_7 8000.00 INTERLOCK[einsteindb]  group by:test.t.c, ",
          "    └─IndexFullScan_10 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:true, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG() */ count(distinct c) from t;",
        "Plan": [
          "StreamAgg_7 1.00 root  funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_11 10000.00 root  index:IndexFullScan_10",
          "  └─IndexFullScan_10 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG() */ count(distinct c) from t;",
        "Plan": [
          "HashAgg_9 1.00 root  funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_10 1.00 root  index:HashAgg_5",
          "  └─HashAgg_5 1.00 INTERLOCK[einsteindb]  group by:test.t.c, ",
          "    └─IndexFullScan_8 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select count(distinct c) from t group by c;",
        "Plan": [
          "HashAgg_10 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_11 8000.00 root  index:HashAgg_5",
          "  └─HashAgg_5 8000.00 INTERLOCK[einsteindb]  group by:test.t.c, ",
          "    └─IndexFullScan_9 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select count(distinct c) from t;",
        "Plan": [
          "HashAgg_9 1.00 root  funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_10 1.00 root  index:HashAgg_5",
          "  └─HashAgg_5 1.00 INTERLOCK[einsteindb]  group by:test.t.c, ",
          "    └─IndexFullScan_8 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ sum(distinct b) from pt;",
        "Plan": [
          "HashAgg_11 1.00 root  funcs:sum(distinct DeferredCauset#9)->DeferredCauset#4",
          "└─Projection_23 16000.00 root  cast(test.pt.b, decimal(65,0) BINARY)->DeferredCauset#9",
          "  └─PartitionUnion_12 16000.00 root  ",
          "    ├─HashAgg_16 8000.00 root  group by:test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b",
          "    │ └─BlockReader_17 8000.00 root  data:HashAgg_13",
          "    │   └─HashAgg_13 8000.00 INTERLOCK[einsteindb]  group by:test.pt.b, ",
          "    │     └─BlockFullScan_15 10000.00 INTERLOCK[einsteindb] block:pt, partition:p0 keep order:false, stats:pseudo",
          "    └─HashAgg_21 8000.00 root  group by:test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b",
          "      └─BlockReader_22 8000.00 root  data:HashAgg_18",
          "        └─HashAgg_18 8000.00 INTERLOCK[einsteindb]  group by:test.pt.b, ",
          "          └─BlockFullScan_20 10000.00 INTERLOCK[einsteindb] block:pt, partition:p1 keep order:false, stats:pseudo"
        ],
        "Result": [
          "<nil>"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ count(distinct a) from (select * from ta union all select * from tb) t;",
        "Plan": [
          "HashAgg_14 1.00 root  funcs:count(distinct DeferredCauset#5)->DeferredCauset#6",
          "└─Union_15 16000.00 root  ",
          "  ├─HashAgg_19 8000.00 root  group by:test.ta.a, funcs:firstrow(test.ta.a)->DeferredCauset#5, funcs:firstrow(test.ta.a)->DeferredCauset#5",
          "  │ └─BlockReader_20 8000.00 root  data:HashAgg_16",
          "  │   └─HashAgg_16 8000.00 INTERLOCK[einsteindb]  group by:test.ta.a, ",
          "  │     └─BlockFullScan_18 10000.00 INTERLOCK[einsteindb] block:ta keep order:false, stats:pseudo",
          "  └─HashAgg_24 8000.00 root  group by:test.tb.a, funcs:firstrow(test.tb.a)->DeferredCauset#5, funcs:firstrow(test.tb.a)->DeferredCauset#5",
          "    └─BlockReader_25 8000.00 root  data:HashAgg_21",
          "      └─HashAgg_21 8000.00 INTERLOCK[einsteindb]  group by:test.tb.a, ",
          "        └─BlockFullScan_23 10000.00 INTERLOCK[einsteindb] block:tb keep order:false, stats:pseudo"
        ],
        "Result": [
          "1"
        ]
      }
    ]
  },
  {
    "Name": "TestPushdownDistinctDisable",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ avg(distinct a) from t;",
        "Plan": [
          "HashAgg_5 1.00 root  funcs:avg(distinct DeferredCauset#6)->DeferredCauset#5",
          "└─Projection_8 10000.00 root  cast(test.t.a, decimal(65,4) BINARY)->DeferredCauset#6",
          "  └─BlockReader_7 10000.00 root  data:BlockFullScan_6",
          "    └─BlockFullScan_6 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.5000"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ a, count(distinct a) from t;",
        "Plan": [
          "Projection_4 1.00 root  test.t.a, DeferredCauset#5",
          "└─HashAgg_5 1.00 root  funcs:count(distinct test.t.a)->DeferredCauset#5, funcs:firstrow(test.t.a)->test.t.a",
          "  └─BlockReader_7 10000.00 root  data:BlockFullScan_6",
          "    └─BlockFullScan_6 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;",
        "Plan": [
          "Projection_4 8000.00 root  DeferredCauset#5, test.t.c, DeferredCauset#5, DeferredCauset#6, DeferredCauset#7, DeferredCauset#8, DeferredCauset#9",
          "└─HashAgg_5 8000.00 root  group by:DeferredCauset#17, funcs:avg(DeferredCauset#10)->DeferredCauset#5, funcs:count(distinct DeferredCauset#11, DeferredCauset#12)->DeferredCauset#6, funcs:count(distinct DeferredCauset#13)->DeferredCauset#7, funcs:count(distinct DeferredCauset#14)->DeferredCauset#8, funcs:sum(DeferredCauset#15)->DeferredCauset#9, funcs:firstrow(DeferredCauset#16)->test.t.c",
          "  └─Projection_8 10000.00 root  cast(test.t.b, decimal(65,4) BINARY)->DeferredCauset#10, test.t.a, test.t.b, test.t.a, test.t.c, cast(test.t.b, decimal(65,0) BINARY)->DeferredCauset#15, test.t.c, test.t.c",
          "    └─BlockReader_7 10000.00 root  data:BlockFullScan_6",
          "      └─BlockFullScan_6 10000.00 INTERLOCK[einsteindb] block:t keep order:false, stats:pseudo"
        ],
        "Result": [
          "1.0000 1 1.0000 1 1 1 1",
          "1.3333 3 1.3333 3 2 1 4",
          "2.0000 <nil> 2.0000 1 1 0 2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG(), AGG_TO_INTERLOCK() */ count(distinct c) from t group by c;",
        "Plan": [
          "StreamAgg_6 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_9 10000.00 root  index:IndexFullScan_8",
          "  └─IndexFullScan_8 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:true, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ STREAM_AGG(), AGG_TO_INTERLOCK() */ count(distinct c) from t;",
        "Plan": [
          "StreamAgg_6 1.00 root  funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_11 10000.00 root  index:IndexFullScan_10",
          "  └─IndexFullScan_10 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ count(distinct c) from t;",
        "Plan": [
          "HashAgg_5 1.00 root  funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_9 10000.00 root  index:IndexFullScan_8",
          "  └─IndexFullScan_8 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:false, stats:pseudo"
        ],
        "Result": [
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ AGG_TO_INTERLOCK() */ count(distinct c) from t group by c;",
        "Plan": [
          "StreamAgg_6 8000.00 root  group by:test.t.c, funcs:count(distinct test.t.c)->DeferredCauset#5",
          "└─IndexReader_12 10000.00 root  index:IndexFullScan_11",
          "  └─IndexFullScan_11 10000.00 INTERLOCK[einsteindb] block:t, index:c(c) keep order:true, stats:pseudo"
        ],
        "Result": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ sum(distinct b) from pt;",
        "Plan": [
          "HashAgg_11 1.00 root  funcs:sum(distinct DeferredCauset#9)->DeferredCauset#4",
          "└─Projection_23 16000.00 root  cast(test.pt.b, decimal(65,0) BINARY)->DeferredCauset#9",
          "  └─PartitionUnion_12 16000.00 root  ",
          "    ├─HashAgg_16 8000.00 root  group by:test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b",
          "    │ └─BlockReader_17 8000.00 root  data:HashAgg_13",
          "    │   └─HashAgg_13 8000.00 INTERLOCK[einsteindb]  group by:test.pt.b, ",
          "    │     └─BlockFullScan_15 10000.00 INTERLOCK[einsteindb] block:pt, partition:p0 keep order:false, stats:pseudo",
          "    └─HashAgg_21 8000.00 root  group by:test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b",
          "      └─BlockReader_22 8000.00 root  data:HashAgg_18",
          "        └─HashAgg_18 8000.00 INTERLOCK[einsteindb]  group by:test.pt.b, ",
          "          └─BlockFullScan_20 10000.00 INTERLOCK[einsteindb] block:pt, partition:p1 keep order:false, stats:pseudo"
        ],
        "Result": [
          "<nil>"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ count(distinct a) from (select * from ta union all select * from tb) t;",
        "Plan": [
          "HashAgg_14 1.00 root  funcs:count(distinct DeferredCauset#5)->DeferredCauset#6",
          "└─Union_15 16000.00 root  ",
          "  ├─HashAgg_19 8000.00 root  group by:test.ta.a, funcs:firstrow(test.ta.a)->DeferredCauset#5, funcs:firstrow(test.ta.a)->DeferredCauset#5",
          "  │ └─BlockReader_20 8000.00 root  data:HashAgg_16",
          "  │   └─HashAgg_16 8000.00 INTERLOCK[einsteindb]  group by:test.ta.a, ",
          "  │     └─BlockFullScan_18 10000.00 INTERLOCK[einsteindb] block:ta keep order:false, stats:pseudo",
          "  └─HashAgg_24 8000.00 root  group by:test.tb.a, funcs:firstrow(test.tb.a)->DeferredCauset#5, funcs:firstrow(test.tb.a)->DeferredCauset#5",
          "    └─BlockReader_25 8000.00 root  data:HashAgg_21",
          "      └─HashAgg_21 8000.00 INTERLOCK[einsteindb]  group by:test.tb.a, ",
          "        └─BlockFullScan_23 10000.00 INTERLOCK[einsteindb] block:tb keep order:false, stats:pseudo"
        ],
        "Result": [
          "1"
        ]
      }
    ]
  },
  {
    "Name": "TestPushdownDistinctEnableAggPushDownDisable",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ sum(distinct b) from pt;",
        "Plan": [
          "HashAgg_11 1.00 root  funcs:sum(distinct DeferredCauset#9)->DeferredCauset#4",
          "└─Projection_23 16000.00 root  cast(test.pt.b, decimal(65,0) BINARY)->DeferredCauset#9",
          "  └─PartitionUnion_12 16000.00 root  ",
          "    ├─HashAgg_16 8000.00 root  group by:test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b",
          "    │ └─BlockReader_17 8000.00 root  data:HashAgg_13",
          "    │   └─HashAgg_13 8000.00 INTERLOCK[einsteindb]  group by:test.pt.b, ",
          "    │     └─BlockFullScan_15 10000.00 INTERLOCK[einsteindb] block:pt, partition:p0 keep order:false, stats:pseudo",
          "    └─HashAgg_21 8000.00 root  group by:test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b, funcs:firstrow(test.pt.b)->test.pt.b",
          "      └─BlockReader_22 8000.00 root  data:HashAgg_18",
          "        └─HashAgg_18 8000.00 INTERLOCK[einsteindb]  group by:test.pt.b, ",
          "          └─BlockFullScan_20 10000.00 INTERLOCK[einsteindb] block:pt, partition:p1 keep order:false, stats:pseudo"
        ],
        "Result": [
          "<nil>"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_AGG(), AGG_TO_INTERLOCK() */ count(distinct a) from (select * from ta union all select * from tb) t;",
        "Plan": [
          "HashAgg_11 1.00 root  funcs:count(distinct DeferredCauset#5)->DeferredCauset#6",
          "└─Union_12 20000.00 root  ",
          "  ├─BlockReader_15 10000.00 root  data:BlockFullScan_14",
          "  │ └─BlockFullScan_14 10000.00 INTERLOCK[einsteindb] block:ta keep order:false, stats:pseudo",
          "  └─BlockReader_18 10000.00 root  data:BlockFullScan_17",
          "    └─BlockFullScan_17 10000.00 INTERLOCK[einsteindb] block:tb keep order:false, stats:pseudo"
        ],
        "Result": [
          "1"
        ]
      }
    ]
  },
  {
    "Name": "TestGroupConcatOrderby",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ agg_to_INTERLOCK */ group_concat(name ORDER BY name desc SEPARATOR '++'), group_concat(id ORDER BY name desc, id asc SEPARATOR '--') from test;",
        "Plan": [
          "HashAgg_5 1.00 root  funcs:group_concat(DeferredCauset#6 order by DeferredCauset#7 desc separator \"++\")->DeferredCauset#4, funcs:group_concat(DeferredCauset#8 order by DeferredCauset#9 desc, DeferredCauset#10 separator \"--\")->DeferredCauset#5",
          "└─Projection_18 10000.00 root  cast(test.test.name, var_string(20))->DeferredCauset#6, test.test.name, cast(test.test.id, var_string(20))->DeferredCauset#8, test.test.name, test.test.id",
          "  └─BlockReader_11 10000.00 root  data:BlockFullScan_10",
          "    └─BlockFullScan_10 10000.00 INTERLOCK[einsteindb] block:test keep order:false, stats:pseudo"
        ],
        "Result": [
          "500++200++30++20++20++10 3--3--1--1--2--1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ agg_to_INTERLOCK */ group_concat(name ORDER BY name desc SEPARATOR '++'), group_concat(id ORDER BY name desc, id asc SEPARATOR '--') from ptest;",
        "Plan": [
          "HashAgg_5 1.00 root  funcs:group_concat(DeferredCauset#6 order by DeferredCauset#7 desc separator \"++\")->DeferredCauset#4, funcs:group_concat(DeferredCauset#8 order by DeferredCauset#9 desc, DeferredCauset#10 separator \"--\")->DeferredCauset#5",
          "└─Projection_18 10000.00 root  cast(test.ptest.name, var_string(20))->DeferredCauset#6, test.ptest.name, cast(test.ptest.id, var_string(20))->DeferredCauset#8, test.ptest.name, test.ptest.id",
          "  └─BlockReader_11 10000.00 root partition:all data:BlockFullScan_10",
          "    └─BlockFullScan_10 10000.00 INTERLOCK[einsteindb] block:ptest keep order:false, stats:pseudo"
        ],
        "Result": [
          "500++200++30++20++20++10 3--3--1--1--2--1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ agg_to_INTERLOCK */ group_concat(distinct name order by name desc) from test;",
        "Plan": [
          "HashAgg_5 1.00 root  funcs:group_concat(distinct DeferredCauset#5 order by DeferredCauset#6 desc separator \",\")->DeferredCauset#4",
          "└─Projection_9 10000.00 root  cast(test.test.name, var_string(20))->DeferredCauset#5, test.test.name",
          "  └─BlockReader_8 10000.00 root  data:BlockFullScan_7",
          "    └─BlockFullScan_7 10000.00 INTERLOCK[einsteindb] block:test keep order:false, stats:pseudo"
        ],
        "Result": [
          "500,200,30,20,10"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ agg_to_INTERLOCK */ group_concat(distinct name order by name desc) from ptest;",
        "Plan": [
          "HashAgg_5 1.00 root  funcs:group_concat(distinct DeferredCauset#5 order by DeferredCauset#6 desc separator \",\")->DeferredCauset#4",
          "└─Projection_9 10000.00 root  cast(test.ptest.name, var_string(20))->DeferredCauset#5, test.ptest.name",
          "  └─BlockReader_8 10000.00 root partition:all data:BlockFullScan_7",
          "    └─BlockFullScan_7 10000.00 INTERLOCK[einsteindb] block:ptest keep order:false, stats:pseudo"
        ],
        "Result": [
          "500,200,30,20,10"
        ]
      }
    ]
  },
  {
    "Name": "TestPosetDagPlanBuilderWindow",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select lead(a, 1) over (partition by null) as c from t",
        "Best": "IndexReader(Index(t.f)[[NULL,+inf]])->Window(lead(test.t.a, 1)->DeferredCauset#14 over())->Projection"
      }
    ]
  },
  {
    "Name": "TestPosetDagPlanBuilderWindowParallel",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select lead(a, 1) over (partition by null) as c from t",
        "Best": "IndexReader(Index(t.f)[[NULL,+inf]])->Window(lead(test.t.a, 1)->DeferredCauset#14 over())->Projection"
      },
      {
        "ALLEGROALLEGROSQL": "select lead(a, 1) over (partition by b) as c from t",
        "Best": "BlockReader(Block(t))->Sort->Window(lead(test.t.a, 1)->DeferredCauset#14 over(partition by test.t.b))->Partition(execution info: concurrency:4, data source:BlockReader_10)->Projection"
      }
    ]
  },
  {
    "Name": "TestNominalSort",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1, t2) */ t1.a from t t1, t t2 where t1.a = t2.b order by t1.a",
        "Plan": [
          "MergeJoin_21 12487.50 root  inner join, left key:test.t.a, right key:test.t.b",
          "├─IndexReader_15(Build) 9990.00 root  index:IndexFullScan_14",
          "│ └─IndexFullScan_14 9990.00 INTERLOCK[einsteindb] block:t2, index:idx_b(b) keep order:true, stats:pseudo",
          "└─IndexReader_13(Probe) 9990.00 root  index:IndexFullScan_12",
          "  └─IndexFullScan_12 9990.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "1",
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1, t2) */ t1.a from t t1, t t2 where t1.a = t2.b order by t1.a+1",
        "Plan": [
          "Projection_24 12487.50 root  test.t.a",
          "└─Projection_23 12487.50 root  test.t.a, plus(test.t.a, 1)->DeferredCauset#7",
          "  └─MergeJoin_21 12487.50 root  inner join, left key:test.t.a, right key:test.t.b",
          "    ├─IndexReader_15(Build) 9990.00 root  index:IndexFullScan_14",
          "    │ └─IndexFullScan_14 9990.00 INTERLOCK[einsteindb] block:t2, index:idx_b(b) keep order:true, stats:pseudo",
          "    └─IndexReader_13(Probe) 9990.00 root  index:IndexFullScan_12",
          "      └─IndexFullScan_12 9990.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "1",
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1, t2) */ t1.a from t t1, t t2 where t1.a = t2.b order by t1.a-1",
        "Plan": [
          "Projection_24 12487.50 root  test.t.a",
          "└─Projection_23 12487.50 root  test.t.a, minus(test.t.a, 1)->DeferredCauset#7",
          "  └─MergeJoin_21 12487.50 root  inner join, left key:test.t.a, right key:test.t.b",
          "    ├─IndexReader_15(Build) 9990.00 root  index:IndexFullScan_14",
          "    │ └─IndexFullScan_14 9990.00 INTERLOCK[einsteindb] block:t2, index:idx_b(b) keep order:true, stats:pseudo",
          "    └─IndexReader_13(Probe) 9990.00 root  index:IndexFullScan_12",
          "      └─IndexFullScan_12 9990.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "1",
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1, t2) */ t1.a from t t1, t t2 where t1.a = t2.b order by -t1.a",
        "Plan": [
          "Projection_32 12487.50 root  test.t.a",
          "└─Projection_31 12487.50 root  test.t.a, unaryminus(test.t.a)->DeferredCauset#7",
          "  └─MergeJoin_21 12487.50 root  inner join, left key:test.t.a, right key:test.t.b",
          "    ├─IndexReader_26(Build) 9990.00 root  index:IndexFullScan_25",
          "    │ └─IndexFullScan_25 9990.00 INTERLOCK[einsteindb] block:t2, index:idx_b(b) keep order:true, desc, stats:pseudo",
          "    └─IndexReader_24(Probe) 9990.00 root  index:IndexFullScan_23",
          "      └─IndexFullScan_23 9990.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:true, desc, stats:pseudo"
        ],
        "Result": [
          "2",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1, t2) */ t1.a from t t1, t t2 where t1.a = t2.b order by -t1.a+3",
        "Plan": [
          "Projection_32 12487.50 root  test.t.a",
          "└─Projection_31 12487.50 root  test.t.a, plus(unaryminus(test.t.a), 3)->DeferredCauset#7",
          "  └─MergeJoin_21 12487.50 root  inner join, left key:test.t.a, right key:test.t.b",
          "    ├─IndexReader_26(Build) 9990.00 root  index:IndexFullScan_25",
          "    │ └─IndexFullScan_25 9990.00 INTERLOCK[einsteindb] block:t2, index:idx_b(b) keep order:true, desc, stats:pseudo",
          "    └─IndexReader_24(Probe) 9990.00 root  index:IndexFullScan_23",
          "      └─IndexFullScan_23 9990.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:true, desc, stats:pseudo"
        ],
        "Result": [
          "2",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1, t2) */ t1.a from t t1, t t2 where t1.a = t2.b order by 1+t1.a",
        "Plan": [
          "Projection_24 12487.50 root  test.t.a",
          "└─Projection_23 12487.50 root  test.t.a, plus(1, test.t.a)->DeferredCauset#7",
          "  └─MergeJoin_21 12487.50 root  inner join, left key:test.t.a, right key:test.t.b",
          "    ├─IndexReader_15(Build) 9990.00 root  index:IndexFullScan_14",
          "    │ └─IndexFullScan_14 9990.00 INTERLOCK[einsteindb] block:t2, index:idx_b(b) keep order:true, stats:pseudo",
          "    └─IndexReader_13(Probe) 9990.00 root  index:IndexFullScan_12",
          "      └─IndexFullScan_12 9990.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "1",
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1, t2) */ t1.a from t t1, t t2 where t1.a = t2.b order by 1-t1.a",
        "Plan": [
          "Projection_32 12487.50 root  test.t.a",
          "└─Projection_31 12487.50 root  test.t.a, minus(1, test.t.a)->DeferredCauset#7",
          "  └─MergeJoin_21 12487.50 root  inner join, left key:test.t.a, right key:test.t.b",
          "    ├─IndexReader_26(Build) 9990.00 root  index:IndexFullScan_25",
          "    │ └─IndexFullScan_25 9990.00 INTERLOCK[einsteindb] block:t2, index:idx_b(b) keep order:true, desc, stats:pseudo",
          "    └─IndexReader_24(Probe) 9990.00 root  index:IndexFullScan_23",
          "      └─IndexFullScan_23 9990.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:true, desc, stats:pseudo"
        ],
        "Result": [
          "2",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1, t2) */ t1.a from t t1, t t2 where t1.a = t2.b order by 1-t1.a+3",
        "Plan": [
          "Projection_32 12487.50 root  test.t.a",
          "└─Projection_31 12487.50 root  test.t.a, plus(minus(1, test.t.a), 3)->DeferredCauset#7",
          "  └─MergeJoin_21 12487.50 root  inner join, left key:test.t.a, right key:test.t.b",
          "    ├─IndexReader_26(Build) 9990.00 root  index:IndexFullScan_25",
          "    │ └─IndexFullScan_25 9990.00 INTERLOCK[einsteindb] block:t2, index:idx_b(b) keep order:true, desc, stats:pseudo",
          "    └─IndexReader_24(Probe) 9990.00 root  index:IndexFullScan_23",
          "      └─IndexFullScan_23 9990.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:true, desc, stats:pseudo"
        ],
        "Result": [
          "2",
          "1",
          "1"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1, t2) */ t1.a from t t1, t t2 where t1.a = t2.b order by 1+t1.a+3",
        "Plan": [
          "Projection_24 12487.50 root  test.t.a",
          "└─Projection_23 12487.50 root  test.t.a, plus(plus(1, test.t.a), 3)->DeferredCauset#7",
          "  └─MergeJoin_21 12487.50 root  inner join, left key:test.t.a, right key:test.t.b",
          "    ├─IndexReader_15(Build) 9990.00 root  index:IndexFullScan_14",
          "    │ └─IndexFullScan_14 9990.00 INTERLOCK[einsteindb] block:t2, index:idx_b(b) keep order:true, stats:pseudo",
          "    └─IndexReader_13(Probe) 9990.00 root  index:IndexFullScan_12",
          "      └─IndexFullScan_12 9990.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "1",
          "2"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MilevaDB_SMJ(t1, t2) */ t1.a from t t1, t t2 where t1.a = t2.b order by 3*t1.a",
        "Plan": [
          "Projection_19 12487.50 root  test.t.a",
          "└─Sort_7 12487.50 root  DeferredCauset#7",
          "  └─Projection_20 12487.50 root  test.t.a, mul(3, test.t.a)->DeferredCauset#7",
          "    └─MergeJoin_9 12487.50 root  inner join, left key:test.t.a, right key:test.t.b",
          "      ├─IndexReader_14(Build) 9990.00 root  index:IndexFullScan_13",
          "      │ └─IndexFullScan_13 9990.00 INTERLOCK[einsteindb] block:t2, index:idx_b(b) keep order:true, stats:pseudo",
          "      └─IndexReader_12(Probe) 9990.00 root  index:IndexFullScan_11",
          "        └─IndexFullScan_11 9990.00 INTERLOCK[einsteindb] block:t1, index:idx_a(a) keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "1",
          "2"
        ]
      }
    ]
  },
  {
    "Name": "TestInlineProjection",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1, t2 where t1.a = t2.a;",
        "Plan": "LeftHashJoin{BlockReader(Block(t1)->Sel([not(isnull(test.t1.a))]))->BlockReader(Block(t2)->Sel([not(isnull(test.t2.a))]))}(test.t1.a,test.t2.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_1` `test`.`t2` ), hash_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": "LeftHashJoin{BlockReader(Block(t1)->Sel([not(isnull(test.t1.a))]))->BlockReader(Block(t2)->Sel([not(isnull(test.t2.a))]))}(test.t1.a,test.t2.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_1` `test`.`t2` ), hash_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1 left outer join t2 on t1.a = t2.a;",
        "Plan": "LeftHashJoin{BlockReader(Block(t1))->BlockReader(Block(t2)->Sel([not(isnull(test.t2.a))]))}(test.t1.a,test.t2.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_1` `test`.`t2` ), hash_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ HASH_JOIN(t1) */ t1.b, t2.b from t1 right outer join t2 on t1.a = t2.a;",
        "Plan": "RightHashJoin{BlockReader(Block(t1)->Sel([not(isnull(test.t1.a))]))->BlockReader(Block(t2))}(test.t1.a,test.t2.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` ), use_index(@`sel_1` `test`.`t2` ), hash_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select 1 from (select /*+ HASH_JOIN(t1) */ t1.a in (select t2.a from t2) from t1) x;",
        "Plan": "LeftHashJoin{IndexReader(Index(t1.idx_a)[[NULL,+inf]])->IndexReader(Index(t2.idx_a)[[NULL,+inf]])}->Projection",
        "Hints": "use_index(@`sel_2` `test`.`t1` `idx_a`), use_index(@`sel_3` `test`.`t2` `idx_a`), hash_join(@`sel_2` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select 1 from (select /*+ HASH_JOIN(t1) */ t1.a not in (select t2.a from t2) from t1) x;",
        "Plan": "LeftHashJoin{IndexReader(Index(t1.idx_a)[[NULL,+inf]])->IndexReader(Index(t2.idx_a)[[NULL,+inf]])}->Projection",
        "Hints": "use_index(@`sel_2` `test`.`t1` `idx_a`), use_index(@`sel_3` `test`.`t2` `idx_a`), hash_join(@`sel_2` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": "IndexJoin{IndexLookUp(Index(t1.idx_a)[[NULL,+inf]]->Sel([not(isnull(test.t1.a))]), Block(t1))->BlockReader(Block(t2)->Sel([not(isnull(test.t2.a))]))}(test.t2.a,test.t1.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` `idx_a`), use_index(@`sel_1` `test`.`t2` ), inl_join(@`sel_1` `test`.`t1`)"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_HASH_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": "IndexHashJoin{IndexLookUp(Index(t1.idx_a)[[NULL,+inf]]->Sel([not(isnull(test.t1.a))]), Block(t1))->BlockReader(Block(t2)->Sel([not(isnull(test.t2.a))]))}(test.t2.a,test.t1.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` `idx_a`), use_index(@`sel_1` `test`.`t2` ), inl_hash_join(@`sel_1` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ INL_MERGE_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": "IndexMergeJoin{IndexLookUp(Index(t1.idx_a)[[NULL,+inf]]->Sel([not(isnull(test.t1.a))]), Block(t1))->Projection->BlockReader(Block(t2)->Sel([not(isnull(test.t2.a))]))}(test.t2.a,test.t1.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` `idx_a`), use_index(@`sel_1` `test`.`t2` )"
      },
      {
        "ALLEGROALLEGROSQL": "select /*+ MERGE_JOIN(t1) */ t1.b, t2.b from t1 inner join t2 on t1.a = t2.a;",
        "Plan": "MergeInnerJoin{IndexLookUp(Index(t1.idx_a)[[-inf,+inf]], Block(t1))->Projection->IndexLookUp(Index(t2.idx_a)[[-inf,+inf]], Block(t2))->Projection}(test.t1.a,test.t2.a)",
        "Hints": "use_index(@`sel_1` `test`.`t1` `idx_a`), use_index(@`sel_1` `test`.`t2` `idx_a`)"
      }
    ]
  },
  {
    "Name": "TestHintFromDiffDatabase",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+ inl_hash_join(test.t1) */ * from test.t2 join test.t1 on test.t2.a = test.t1.a",
        "Plan": "IndexHashJoin{IndexReader(Index(t2.idx_a)[[-inf,+inf]])->IndexReader(Index(t1.idx_a)[[NULL,+inf]]->Sel([not(isnull(test.t1.a))]))}(test.t2.a,test.t1.a)"
      }
    ]
  },
  {
    "Name": "TestNthPlanHintWithExplain",
    "Cases": [
      {
        "ALLEGROALLEGROSQL": "select /*+nth_plan(1)*/ * from test.tt where a=1 and b=1",
        "Plan": [
          "BlockReader_7 0.01 root  data:Selection_6",
          "└─Selection_6 0.01 INTERLOCK[einsteindb]  eq(test.tt.a, 1), eq(test.tt.b, 1)",
          "  └─BlockFullScan_5 10000.00 INTERLOCK[einsteindb] block:tt keep order:false, stats:pseudo"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+nth_plan(2)*/ * from test.tt where a=1 and b=1;",
        "Plan": [
          "IndexLookUp_11 0.01 root  ",
          "├─IndexRangeScan_8(Build) 10.00 INTERLOCK[einsteindb] block:tt, index:a(a) range:[1,1], keep order:false, stats:pseudo",
          "└─Selection_10(Probe) 0.01 INTERLOCK[einsteindb]  eq(test.tt.b, 1)",
          "  └─BlockRowIDScan_9 10.00 INTERLOCK[einsteindb] block:tt keep order:false, stats:pseudo"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+nth_plan(3)*/ * from test.tt where a=1 and b=1;",
        "Plan": [
          "IndexLookUp_15 0.01 root  ",
          "├─IndexRangeScan_12(Build) 10.00 INTERLOCK[einsteindb] block:tt, index:b(b) range:[1,1], keep order:false, stats:pseudo",
          "└─Selection_14(Probe) 0.01 INTERLOCK[einsteindb]  eq(test.tt.a, 1)",
          "  └─BlockRowIDScan_13 10.00 INTERLOCK[einsteindb] block:tt keep order:false, stats:pseudo"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select /*+nth_plan(2)*/ * from test.tt where a=1 and b=1;",
        "Plan": [
          "IndexLookUp_11 0.01 root  ",
          "├─IndexRangeScan_8(Build) 10.00 INTERLOCK[einsteindb] block:tt, index:a(a) range:[1,1], keep order:false, stats:pseudo",
          "└─Selection_10(Probe) 0.01 INTERLOCK[einsteindb]  eq(test.tt.b, 1)",
          "  └─BlockRowIDScan_9 10.00 INTERLOCK[einsteindb] block:tt keep order:false, stats:pseudo"
        ]
      },
      {
        "ALLEGROALLEGROSQL": "select * from test.tt where a=1 and b=1",
        "Plan": [
          "IndexLookUp_11 0.01 root  ",
          "├─IndexRangeScan_8(Build) 10.00 INTERLOCK[einsteindb] block:tt, index:a(a) range:[1,1], keep order:false, stats:pseudo",
          "└─Selection_10(Probe) 0.01 INTERLOCK[einsteindb]  eq(test.tt.b, 1)",
          "  └─BlockRowIDScan_9 10.00 INTERLOCK[einsteindb] block:tt keep order:false, stats:pseudo"
        ]
      }
    ]
  }
]
